import { EncryptedPayload, KeeperHttpResponse, KeyValueStorage, TransmissionKey } from './platform';
export { KeyValueStorage } from './platform';
export declare const initialize: (pkgVersion?: string) => void;
export type SecretManagerOptions = {
    storage: KeyValueStorage;
    queryFunction?: (url: string, transmissionKey: TransmissionKey, payload: EncryptedPayload, allowUnverifiedCertificate?: boolean) => Promise<KeeperHttpResponse>;
    allowUnverifiedCertificate?: boolean;
};
export type QueryOptions = {
    recordsFilter?: string[];
    foldersFilter?: string[];
};
export type CreateOptions = {
    folderUid: string;
    subFolderUid?: string;
};
type SecretsManagerDeleteResponseRecord = {
    errorMessage: string;
    recordUid: string;
    responseCode: string;
};
type SecretsManagerDeleteResponseFolder = {
    errorMessage: string;
    folderUid: string;
    responseCode: string;
};
type SecretsManagerDeleteResponse = {
    records: SecretsManagerDeleteResponseRecord[];
    folders: SecretsManagerDeleteResponseFolder[];
};
export type KeeperSecrets = {
    appData: {
        title: string;
        type: string;
    };
    expiresOn?: Date;
    records: KeeperRecord[];
    warnings?: string[];
    extra?: {};
};
export type KeeperRecord = {
    recordUid: string;
    folderUid?: string;
    innerFolderUid?: string;
    data: any;
    revision: number;
    files?: KeeperFile[];
};
export type KeeperFolder = {
    folderUid: string;
    parentUid?: string;
    name?: string;
};
export type KeeperFile = {
    fileUid: string;
    data: any;
    url?: string;
    thumbnailUrl?: string;
};
export type KeeperFileUpload = {
    name: string;
    title: string;
    type?: string;
    data: Uint8Array;
};
export declare const generateTransmissionKey: (storage: KeyValueStorage) => Promise<TransmissionKey>;
export declare const getClientId: (clientKey: string) => Promise<string>;
export declare const initializeStorage: (storage: KeyValueStorage, oneTimeToken: string, hostName?: string | 'keepersecurity.com' | 'keepersecurity.eu' | 'keepersecurity.au') => Promise<void>;
export declare const getSecrets: (options: SecretManagerOptions, recordsFilter?: string[]) => Promise<KeeperSecrets>;
export declare const getSecrets2: (options: SecretManagerOptions, queryOptions?: QueryOptions) => Promise<KeeperSecrets>;
export declare const getFolders: (options: SecretManagerOptions) => Promise<KeeperFolder[]>;
export declare const tryGetNotationResults: (options: SecretManagerOptions, notation: string) => Promise<string[]>;
export declare const getNotationResults: (options: SecretManagerOptions, notation: string) => Promise<string[]>;
export declare const findSecretsByTitle: (records: KeeperRecord[], recordTitle: string) => Promise<KeeperRecord[]>;
export declare const findSecretByTitle: (records: KeeperRecord[], recordTitle: string) => Promise<KeeperRecord | undefined>;
export declare const getSecretsByTitle: (options: SecretManagerOptions, recordTitle: string) => Promise<KeeperRecord[]>;
export declare const getSecretByTitle: (options: SecretManagerOptions, recordTitle: string) => Promise<KeeperRecord | undefined>;
export declare const updateSecret: (options: SecretManagerOptions, record: KeeperRecord) => Promise<void>;
export declare const deleteSecret: (options: SecretManagerOptions, recordUids: string[]) => Promise<SecretsManagerDeleteResponse>;
export declare const deleteFolder: (options: SecretManagerOptions, folderUids: string[], forceDeletion?: boolean) => Promise<SecretsManagerDeleteResponse>;
export declare const createSecret: (options: SecretManagerOptions, folderUid: string, recordData: any) => Promise<string>;
export declare const createSecret2: (options: SecretManagerOptions, createOptions: CreateOptions, recordData: any) => Promise<string>;
export declare const createFolder: (options: SecretManagerOptions, createOptions: CreateOptions, folderName: string) => Promise<string>;
export declare const updateFolder: (options: SecretManagerOptions, folderUid: string, folderName: string) => Promise<void>;
export declare const downloadFile: (file: KeeperFile) => Promise<Uint8Array>;
export declare const downloadThumbnail: (file: KeeperFile) => Promise<Uint8Array>;
export declare const uploadFile: (options: SecretManagerOptions, ownerRecord: KeeperRecord, file: KeeperFileUpload) => Promise<string>;
export declare const addCustomField: (record: KeeperRecord, field: KeeperRecordField) => void;
export declare class KeeperRecordField {
    type: string;
    label?: string;
}
export declare class LoginField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export type PasswordComplexity = {
    length?: number;
    caps?: number;
    lowercase?: number;
    digits?: number;
    special?: number;
};
export declare class PasswordField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    enforceGeneration?: boolean;
    complexity?: PasswordComplexity;
    value?: string[];
    constructor(value: string);
}
export declare class UrlField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class FileRefField extends KeeperRecordField {
    required?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class OneTimeCodeField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export type Name = {
    first?: string;
    middle?: string;
    last?: string;
};
export declare class NameField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: Name[];
    constructor(value: Name);
}
export declare class BirthDateField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: number[];
    constructor(value: number);
}
export declare class DateField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: number[];
    constructor(value: number);
}
export declare class ExpirationDateField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: number[];
    constructor(value: number);
}
export declare class TextField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export type SecurityQuestion = {
    question?: string;
    answer?: string;
};
export declare class SecurityQuestionField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: SecurityQuestion[];
    constructor(value: SecurityQuestion);
}
export declare class MultilineField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class EmailField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class CardRefField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class AddressRefField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class PinCodeField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export type Phone = {
    region?: string;
    number?: string;
    ext?: string;
    type?: string;
};
export declare class PhoneField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: Phone[];
    constructor(value: Phone);
}
export declare class SecretField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class SecureNoteField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class AccountNumberField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export type PaymentCard = {
    cardNumber?: string;
    cardExpirationDate?: string;
    cardSecurityCode?: string;
};
export declare class PaymentCardField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: PaymentCard[];
    constructor(value: PaymentCard);
}
export type BankAccount = {
    accountType?: string;
    routingNumber?: string;
    accountNumber?: string;
    otherType?: string;
};
export declare class BankAccountField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: BankAccount[];
    constructor(value: BankAccount);
}
export type KeyPair = {
    publicKey?: string;
    privateKey?: string;
};
export declare class KeyPairField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: KeyPair[];
    constructor(value: KeyPair);
}
export type Host = {
    hostName?: string;
    port?: string;
};
export declare class HostField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: Host[];
    constructor(value: Host);
}
export type Address = {
    street1?: string;
    street2?: string;
    city?: string;
    state?: string;
    country?: string;
    zip?: string;
};
export declare class AddressField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: Address[];
    constructor(value: Address);
}
export declare class LicenseNumberField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class RecordRefField extends KeeperRecordField {
    required?: boolean;
    value?: string[];
    constructor(value: string);
}
export type Schedule = {
    type?: string;
    utcTime?: string;
    weekday?: string;
    intervalCount?: number;
};
export declare class ScheduleField extends KeeperRecordField {
    required?: boolean;
    value?: Schedule[];
    constructor(value: Schedule);
}
export type Script = {
    fileRef?: string;
    command?: string;
    recordRef?: string[];
};
export declare class ScriptField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: Script[];
    constructor(value: Script);
}
export declare class DirectoryTypeField extends KeeperRecordField {
    required?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class DatabaseTypeField extends KeeperRecordField {
    required?: boolean;
    value?: string[];
    constructor(value: string);
}
export declare class PamHostnameField extends KeeperRecordField {
    required?: boolean;
    privacyScreen?: boolean;
    value?: Host[];
    constructor(value: Host);
}
export type PamResource = {
    controllerUid?: string;
    folderUid?: string;
    resourceRef?: string[];
};
export declare class PamResourceField extends KeeperRecordField {
    required?: boolean;
    value?: PamResource[];
    constructor(value: PamResource);
}
export declare class CheckboxField extends KeeperRecordField {
    required?: boolean;
    value?: boolean[];
    constructor(value: boolean);
}
export type PrivateKey = {
    crv?: string;
    d?: string;
    ext?: boolean;
    key_ops?: string[];
    kty?: string;
    x?: string;
    y?: string;
};
export type Passkey = {
    privateKey?: PrivateKey;
    credentialId?: string;
    signCount?: number;
    userId?: string;
    relyingParty?: string;
    username?: string;
    createdDate?: number;
};
export declare class PasskeyField extends KeeperRecordField {
    required?: boolean;
    value?: Passkey[];
    constructor(value: Passkey);
}
