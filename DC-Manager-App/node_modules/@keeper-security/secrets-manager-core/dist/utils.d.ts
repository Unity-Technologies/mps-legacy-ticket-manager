export declare const webSafe64: (source: string) => string;
export declare const webSafe64ToRegular: (source: string) => string;
export declare const webSafe64ToBytes: (source: string) => Uint8Array;
export declare const webSafe64FromBytes: (source: Uint8Array) => string;
export declare const privateDerToPublicRaw: (key: Uint8Array) => Uint8Array;
export declare const getTotpCode: (url: string, unixTimeSeconds?: number) => Promise<{
    code: string;
    timeLeft: number;
    period: number;
} | null>;
/**
 * Generates a new password of specified minimum length
 * using provided number of uppercase, lowercase, digits and special characters.
 *
 * Note: If all character groups are unspecified or all have exact zero length
 * then password characters are chosen from all groups uniformly at random.
 *
 * Note: If all charset lengths are negative or 0 but can't reach min_length
 * then all exact/negative charset lengths will be treated as minimum number of characters instead.
 *
 * @param {number} minLength - Minimum password length - default: 32
 * @param {number|null} lowercase - Minimum number of lowercase characters if positive, exact if 0 or negative
 * @param {number|null} uppercase - Minimum number of uppercase characters if positive, exact if 0 or negative
 * @param {number|null} digits - Minimum number of digits if positive, exact if 0 or negative
 * @param {number|null} specialCharacters - Minimum number of special characters if positive, exact if 0 or negative
 * @param {number} specialCharacterSet - String containing custom set of special characters to pick from
 * @returns {string} Generated password string
 */
export declare const generatePassword: (minLength?: number, lowercase?: number | null, uppercase?: number | null, digits?: number | null, specialCharacters?: number | null, specialCharacterSet?: string) => Promise<string>;
/**
 * Try to parse an integer value from a string. Returns the number if successful, otherwise return a default value.
 * @param value The string with an integer to parse.
 * @param defaultValue Default value to return if parsing fails.
 */
export declare function tryParseInt(value: string, defaultValue?: number): number;
