{"version":3,"file":"index.cjs.js","sources":["../src/platform.ts","../src/utils.ts","../src/node/nodePlatform.ts","../src/notation.ts","../src/keeper.ts","../src/node/localConfigStorage.ts","../src/node/index.ts"],"sourcesContent":["export type Platform = {\n//  string routines\n    bytesToBase64(data: Uint8Array): string\n    base64ToBytes(data: string): Uint8Array\n    bytesToString(data: Uint8Array): string\n    stringToBytes(data: string): Uint8Array\n\n//  cryptography\n    getRandomBytes(length: number): Uint8Array\n    generatePrivateKey(keyId: string, storage: KeyValueStorage): Promise<void>\n    exportPublicKey(keyId: string, storage: KeyValueStorage): Promise<Uint8Array>\n    sign(data: Uint8Array, keyId: string, storage: KeyValueStorage): Promise<Uint8Array>\n    publicEncrypt(data: Uint8Array, key: Uint8Array, id?: Uint8Array): Promise<Uint8Array>\n    importKey(keyId: string, key: Uint8Array, storage?: KeyValueStorage): Promise<void>\n    unwrap(key: Uint8Array, keyId: string, unwrappingKeyId: string, storage?: KeyValueStorage, memoryOnly?: boolean, useCBC?: boolean): Promise<void>\n    encrypt(data: Uint8Array, keyId: string, storage?: KeyValueStorage, useCBC?: boolean): Promise<Uint8Array>\n    encryptWithKey(data: Uint8Array, key: Uint8Array, useCBC?: boolean): Promise<Uint8Array>\n    decrypt(data: Uint8Array, keyId: string, storage?: KeyValueStorage, useCBC?: boolean): Promise<Uint8Array>\n    decryptWithKey(data: Uint8Array, key: Uint8Array, useCBC?: boolean): Promise<Uint8Array>\n    hash(data: Uint8Array, tag: string): Promise<Uint8Array>\n    cleanKeyCache(): void\n    hasKeysCached(): boolean;\n    getHmacDigest(algorithm: string, secret: Uint8Array, message: Uint8Array): Promise<Uint8Array>\n    getRandomNumber(n: number): Promise<number>\n    getRandomCharacterInCharset(charset: string): Promise<string>\n\n//  network\n    get(url: string, headers: any): Promise<KeeperHttpResponse>\n    post(url: string, request: Uint8Array, headers?: { [key: string]: string }, allowUnverifiedCertificate?: boolean): Promise<KeeperHttpResponse>\n    fileUpload(url: string, uploadParameters: any, data: Uint8Array | Blob): Promise<any>\n}\n\nexport type KeyValueStorage = {\n    getString(key: string): Promise<string | undefined>\n    saveString<T>(key: string, value: string): Promise<void>\n    getBytes(key: string): Promise<Uint8Array | undefined>\n    saveBytes<T>(key: string, value: Uint8Array): Promise<void>\n    delete(key): Promise<void>\n    getObject?<T>(key: string): Promise<T | undefined>\n    saveObject?<T>(key: string, value: T): Promise<void>\n}\n\nexport type TransmissionKey = {\n    publicKeyId: number\n    key: Uint8Array\n    encryptedKey: Uint8Array\n}\n\nexport type EncryptedPayload = {\n    payload: Uint8Array\n    signature: Uint8Array\n}\n\nexport type KeeperHttpResponse = {\n    statusCode: number\n    headers: any\n    data: Uint8Array\n}\n\nexport function connectPlatform(p: Platform) {\n    platform = p\n}\n\nexport let platform: Platform\n\nexport const loadJsonConfig = (config: string) : KeyValueStorage  => {\n    let jsonStr: string = config\n    try\n    {\n        const str: string = platform.bytesToString(platform.base64ToBytes(config))\n        if (str.trimStart().startsWith('{') && str.trimEnd().endsWith('}'))\n            jsonStr = str\n    }\n    catch (e) {\n        jsonStr = config\n     }\n\n    return inMemoryStorage(JSON.parse(jsonStr))\n}\n\nexport const inMemoryStorage = (storage: any): KeyValueStorage => {\n\n    const getValue = (key: string): any | undefined => {\n        const keyParts = key.split('/')\n        let obj = storage\n        for (const part of keyParts) {\n            obj = obj[part]\n            if (!obj) {\n                return undefined\n            }\n        }\n        return obj.toString();\n    }\n\n    const saveValue = (key: string, value: any): void => {\n        const keyParts = key.split('/')\n        let obj = storage\n        for (const part of keyParts.slice(0, -1)) {\n            if (!obj[part]) {\n                obj[part] = {}\n            }\n            obj = obj[part]\n        }\n        obj[keyParts.slice(-1)[0]] = value\n    }\n\n    const clearValue = (key: string): void => {\n        const keyParts = key.split('/')\n        let obj = storage\n        for (const part of keyParts.slice(0, -1)) {\n            if (!obj[part]) {\n                obj[part] = {}\n            }\n            obj = obj[part]\n        }\n        delete obj[keyParts.slice(-1)[0]]\n    }\n\n    return {\n        getString: key => Promise.resolve(getValue(key)),\n        saveString: (key, value) => {\n            saveValue(key, value)\n            return Promise.resolve()\n        },\n        getBytes: key => {\n            const bytesString: string = getValue(key)\n            if (bytesString) {\n                return Promise.resolve(platform.base64ToBytes(bytesString))\n            } else {\n                return Promise.resolve(undefined)\n            }\n        },\n        saveBytes: (key, value) => {\n            const bytesString = platform.bytesToBase64(value)\n            saveValue(key, bytesString)\n            return Promise.resolve()\n        },\n        delete: (key) => {\n            clearValue(key)\n            return Promise.resolve()\n        }\n    }\n}\n","import {platform} from './platform'\n\nexport const webSafe64 = (source: string): string => source.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n\nexport const webSafe64ToRegular = (source: string): string => source.replace(/-/g, '+').replace(/_/g, '/') + '=='.substring(0, (3 * source.length) % 4);\n\nexport const webSafe64ToBytes = (source: string): Uint8Array => platform.base64ToBytes(webSafe64ToRegular(source));\n\nexport const webSafe64FromBytes = (source: Uint8Array): string => webSafe64(platform.bytesToBase64(source));\n\n// extracts public raw from private key for prime256v1 curve in der/pkcs8\n// privateKey: key.slice(36, 68)\nexport const privateDerToPublicRaw = (key: Uint8Array): Uint8Array => key.slice(-65)\n\nconst b32encode = (base32Text: string): Uint8Array => {\n    /* encodes a string to base32 and returns the encoded string */\n    const alphabet: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\n    // The padding specified in RFC 3548 section 2.2 is not required and should be omitted.\n    const base32: string = (base32Text || '').replace(/=+$/g, '').toUpperCase();\n    if (!base32 || !/^[A-Z2-7]+$/.test(base32))\n        return new Uint8Array();\n\n    const bytes = Array.from(base32)\n    let output = new Array()\n\n    for (let bitIndex = 0; bitIndex < base32.length * 5; bitIndex += 8) {\n        const idx = Math.floor(bitIndex / 5);\n        let dualByte = alphabet.indexOf(bytes[idx]) << 10;\n        if (idx + 1 < bytes.length)\n            dualByte |= alphabet.indexOf(bytes[idx + 1]) << 5;\n        if (idx + 2 < bytes.length)\n            dualByte |= alphabet.indexOf(bytes[idx + 2]);\n        dualByte = 0xff & (dualByte >> (15 - bitIndex % 5 - 8));\n        output.push(dualByte);\n    }\n\n    return new Uint8Array(output);\n}\n\nexport const getTotpCode = async (url: string, unixTimeSeconds: number = 0) : Promise<{ code: string; timeLeft: number; period: number; } | null>  => {\n    let totpUrl: URL;\n    try {\n        totpUrl = new URL(url);\n    } catch (e) {\n        return null;\n    }\n\n    if (totpUrl.protocol != 'otpauth:')\n        return null;\n\n    const secret: string = (totpUrl.searchParams.get('secret') || '').trim();\n    if (!secret)\n        return null;\n\n    let algorithm: string = (totpUrl.searchParams.get('algorithm') || '').trim();\n    if (!algorithm)\n        algorithm = 'SHA1'; // default algorithm\n\n    const strDigits: string = (totpUrl.searchParams.get('digits') || '').trim();\n    let digits: number = ((isNaN(+strDigits) || !Boolean(strDigits)) ? 6 : parseInt(strDigits));\n    digits = digits == 0 ? 6 : digits;\n\n    const strPeriod: string = (totpUrl.searchParams.get('period') || '').trim();\n    let period: number = ((isNaN(+strPeriod) || !Boolean(strPeriod)) ? 30 : parseInt(strPeriod));\n    period = period == 0 ? 30 : period;\n\n    const tmBase: number = unixTimeSeconds != 0 ? unixTimeSeconds : Math.floor(Date.now() / 1000);\n    const tm: bigint = BigInt(Math.floor(tmBase / period));\n\n    const buffer = new ArrayBuffer(8)\n    new DataView(buffer).setBigInt64(0, tm);\n    const msg = new Uint8Array(buffer)\n\n    const secretBytes = b32encode(secret.toUpperCase());\n    if (secretBytes == null || secretBytes.length < 1)\n        return null;\n\n    const digest = await platform.getHmacDigest(algorithm, secretBytes, msg);\n    if (digest.length < 1)\n        return null;\n\n    const offset = digest[digest.length - 1] & 0x0f;\n    const codeBytes = new Uint8Array(digest.slice(offset, offset+4));\n    codeBytes[0] &= 0x7f;\n    let codeInt = new DataView(codeBytes.buffer).getInt32(0);\n    codeInt %= Math.floor(Math.pow(10, digits));\n    codeInt = Math.floor(codeInt);\n    let codeStr = codeInt.toString(10);\n    while (codeStr.length < digits)\n        codeStr = '0' + codeStr;\n\n    const elapsed = Math.floor(tmBase % period); // time elapsed in current period in seconds\n    const ttl = period - elapsed; // time to live in seconds\n    return { code: codeStr, timeLeft: ttl, period: period };\n}\n\n// password generation\nconst defaultPasswordLength: number = 32\nconst asciiSpecialCharacters: string = '\"!@#$%()+;<>=?[]{}^.,'\nconst asciiLowercase: string = 'abcdefghijklmnopqrstuvwxyz'\nconst asciiUppercase: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nconst asciiDigits: string = '0123456789'\n\nconst shuffle = async (text: string): Promise<string> => {\n    // Fisher-Yates shuffle\n    let result = text\n    if (result.length > 1) {\n        let a = result.split('')\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = await platform.getRandomNumber(i+1) // 0 <= j <= i\n            if (i != j) {\n                const tmp = a[i]\n                a[i] = a[j]\n                a[j] = tmp\n            }\n        }\n        result = a.join('')\n    }\n   return result\n}\n\nconst randomSample = async (length: number, charset: string): Promise<string> => {\n    let result = ''\n    length = Math.abs(length)\n    for (let i = 0; i < length; i++)\n        result += await platform.getRandomCharacterInCharset(charset)\n    return result\n}\n\n/**\n * Generates a new password of specified minimum length\n * using provided number of uppercase, lowercase, digits and special characters.\n *\n * Note: If all character groups are unspecified or all have exact zero length\n * then password characters are chosen from all groups uniformly at random.\n *\n * Note: If all charset lengths are negative or 0 but can't reach min_length\n * then all exact/negative charset lengths will be treated as minimum number of characters instead.\n *\n * @param {number} minLength - Minimum password length - default: 32\n * @param {number|null} lowercase - Minimum number of lowercase characters if positive, exact if 0 or negative\n * @param {number|null} uppercase - Minimum number of uppercase characters if positive, exact if 0 or negative\n * @param {number|null} digits - Minimum number of digits if positive, exact if 0 or negative\n * @param {number|null} specialCharacters - Minimum number of special characters if positive, exact if 0 or negative\n * @param {number} specialCharacterSet - String containing custom set of special characters to pick from\n * @returns {string} Generated password string\n */\nexport const generatePassword = async (\n        minLength: number = defaultPasswordLength,\n        lowercase: number | null = null,\n        uppercase: number | null = null,\n        digits: number | null = null,\n        specialCharacters: number | null = null,\n        specialCharacterSet: string = asciiSpecialCharacters) : Promise<string> => {\n\n    const counts: (number | null)[] = [lowercase, uppercase, digits, specialCharacters]\n    const sumCategories: number = counts.reduce((sum, x) => sum!! + Math.abs(x ?? 0), 0) ?? 0\n\n    // If all lengths are exact/negative but don't reach minLength - convert to minimum/positive lengths\n    const numExactCounts: number = counts.reduce((sum, x) => sum!! + (((x ?? 1) <= 0) ? 1 : 0), 0) ?? 0\n    if (counts.length == numExactCounts && sumCategories < minLength) {\n        if ((lowercase ?? 0) < 0) lowercase = Math.abs(lowercase ?? 0)\n        if ((uppercase ?? 0) < 0) uppercase = Math.abs(uppercase ?? 0)\n        if ((digits ?? 0) < 0) digits = Math.abs(digits ?? 0)\n        if ((specialCharacters ?? 0) < 0) specialCharacters = Math.abs(specialCharacters ?? 0)\n    }\n    let extraChars: string  = ''\n    let extraCount: number = 0\n    if (minLength > sumCategories)\n        extraCount = minLength - sumCategories;\n    if ((lowercase ?? 1) > 0)\n        extraChars += asciiLowercase;\n    if ((uppercase ?? 1) > 0)\n        extraChars += asciiUppercase;\n    if ((digits ?? 1) > 0)\n        extraChars += asciiDigits;\n    if ((specialCharacters ?? 1) > 0)\n        extraChars += specialCharacterSet;\n    if (extraCount > 0 && !extraChars)\n        extraChars = asciiLowercase + asciiUppercase + asciiDigits + specialCharacterSet;\n\n    const categoryMap: { count: number; chars: string }[] = [\n        { count: Math.abs(lowercase ?? 0), chars: asciiLowercase },\n        { count: Math.abs(uppercase ?? 0), chars: asciiUppercase },\n        { count: Math.abs(digits ?? 0), chars: asciiDigits },\n        { count: Math.abs(specialCharacters ?? 0), chars: specialCharacterSet },\n        { count: extraCount, chars: extraChars }\n    ]\n\n    let passwordCharacters: string = ''\n    for (let i = 0; i < categoryMap.length; i++)\n        if (categoryMap[i].count > 0)\n            passwordCharacters += await randomSample(categoryMap[i].count, categoryMap[i].chars)\n\n    const password: string = await shuffle(passwordCharacters)\n    return password\n}\n\n/**\n * Try to parse an integer value from a string. Returns the number if successful, otherwise return a default value.\n * @param value The string with an integer to parse.\n * @param defaultValue Default value to return if parsing fails.\n */\nexport function tryParseInt(value: string, defaultValue: number = 0): number {\n    let parsedValue = parseInt(value, 10)\n    if (isNaN(parsedValue))\n\t\treturn defaultValue // Failed to parse. Return the default value.\n\telse\n\t\treturn parsedValue // Return the parsed value.\n}\n","import {KeeperHttpResponse, KeyValueStorage, Platform} from '../platform'\nimport {privateDerToPublicRaw} from '../utils'\nimport {request, RequestOptions} from 'https'\nimport {\n    createCipheriv,\n    createDecipheriv,\n    createECDH,\n    createHash, createHmac,\n    createPrivateKey,\n    createSign,\n    generateKeyPair,\n    randomBytes\n} from 'crypto'\nimport * as https from \"https\";\n\nconst bytesToBase64 = (data: Uint8Array): string => Buffer.from(data).toString('base64')\n\nconst base64ToBytes = (data: string): Uint8Array => Buffer.from(data, 'base64')\n\nconst bytesToString = (data: Uint8Array): string => Buffer.from(data).toString()\n\nconst stringToBytes = (data: string): Uint8Array => Buffer.from(data)\n\nconst getRandomBytes = (length: number): Uint8Array => randomBytes(length)\n\nconst keyCache: Record<string, Uint8Array> = {}\n\nconst loadKey = async (keyId: string, storage?: KeyValueStorage): Promise<Uint8Array> => {\n    const cachedKey = keyCache[keyId]\n    if (cachedKey) {\n        return cachedKey\n    }\n    const keyBytes = storage\n        ? await storage.getBytes(keyId)\n        : undefined\n    if (!keyBytes) {\n        throw new Error(`Unable to load the key ${keyId}`)\n    }\n    keyCache[keyId] = keyBytes\n    return keyBytes\n}\n\nconst generateKeeperKeyPair = async (): Promise<Uint8Array> => new Promise<Uint8Array>((resolve, reject) => {\n    generateKeyPair('ec', {\n        namedCurve: 'prime256v1'\n    }, (err, publicKey, privateKey) => {\n        if (err) {\n            reject(err)\n        } else {\n            resolve(privateKey.export({\n                format: 'der',\n                type: 'pkcs8'\n            }))\n        }\n    })\n})\n\nconst generatePrivateKey = async (keyId: string, storage: KeyValueStorage): Promise<void> => {\n    const privateKeyDer = await generateKeeperKeyPair()\n    keyCache[keyId] = privateKeyDer\n    await storage.saveBytes(keyId, privateKeyDer)\n}\n\nconst exportPublicKey = async (keyId: string, storage: KeyValueStorage): Promise<Uint8Array> => {\n    const privateKeyDer = await loadKey(keyId, storage)\n    return privateDerToPublicRaw(privateKeyDer)\n}\n\nconst privateDerToPEM = (key: Uint8Array): string => {\n    const rawPrivate = key.slice(36, 68)\n    const rawPublic = key.slice(-65)\n    const keyData1 = Buffer.of(0x30, 0x77, 0x02, 0x01, 0x01, 0x04, 0x20)\n    const keyData2 = Buffer.of(0xa0, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0xa1, 0x44, 0x03, 0x42, 0x00)\n    return `-----BEGIN EC PRIVATE KEY-----\\n${bytesToBase64(Buffer.concat([keyData1, rawPrivate, keyData2, rawPublic]))}\\n-----END EC PRIVATE KEY-----`\n}\n\nconst sign = async (data: Uint8Array, keyId: string, storage: KeyValueStorage): Promise<Uint8Array> => {\n    const privateKeyDer = await loadKey(keyId, storage)\n    const key = privateDerToPEM(privateKeyDer)\n    // TODO revert to using createPrivateKey when node 10 interop is not needed anymore\n    // const key = createPrivateKey({\n    //     key: Buffer.from(privateKeyDer),\n    //     format: 'der',\n    //     type: 'pkcs8',\n    // })\n    const sign = createSign('SHA256')\n    sign.update(data)\n    const sig = sign.sign(key)\n    return Promise.resolve(sig)\n}\n\nconst importKey = async (keyId: string, key: Uint8Array, storage?: KeyValueStorage): Promise<void> => {\n    keyCache[keyId] = key\n    if (storage) {\n        await storage.saveBytes(keyId, key)\n    }\n}\n\nconst encrypt = async (data: Uint8Array, keyId: string, storage?: KeyValueStorage, useCBC?: boolean): Promise<Uint8Array> => {\n    const key = await loadKey(keyId, storage)\n    return _encrypt(data, key, useCBC)\n}\n\nconst _encrypt = (data: Uint8Array, key: Uint8Array, useCBC?: boolean): Promise<Uint8Array> => {\n    if (useCBC) {\n        return _encryptCBC(data, key)\n    }\n    const iv = randomBytes(12)\n    const cipher = createCipheriv('aes-256-gcm', key, iv)\n    const encrypted = Buffer.concat([cipher.update(data), cipher.final()])\n    const tag = cipher.getAuthTag()\n    const result = Buffer.concat([iv, encrypted, tag])\n    return Promise.resolve(result)\n}\n\nconst _encryptCBC = async (data: Uint8Array, key: Uint8Array): Promise<Uint8Array> => {\n    let iv = randomBytes(16);\n    let cipher = createCipheriv(\"aes-256-cbc\", key, iv).setAutoPadding(true);\n    let encrypted = Buffer.concat([cipher.update(data), cipher.final()]);\n    return Buffer.concat([iv, encrypted]);\n}\n\nconst _decrypt = (data: Uint8Array, key: Uint8Array, useCBC?: boolean): Promise<Uint8Array> => {\n    if (useCBC) {\n        return _decryptCBC(data, key)\n    }\n    const iv = data.subarray(0, 12)\n    const encrypted = data.subarray(12, data.length - 16)\n    const tag = data.subarray(data.length - 16)\n    const cipher = createDecipheriv('aes-256-gcm', key, iv)\n    cipher.setAuthTag(tag)\n    return Promise.resolve(Buffer.concat([cipher.update(encrypted), cipher.final()]))\n}\n\nconst _decryptCBC = async (data: Uint8Array, key: Uint8Array): Promise<Uint8Array> => {\n    let iv = data.subarray(0, 16)\n    let encrypted = data.subarray(16)\n    let cipher = createDecipheriv(\"aes-256-cbc\", key, iv).setAutoPadding(true)\n    return Buffer.concat([cipher.update(encrypted), cipher.final()])\n}\n\nconst unwrap = async (key: Uint8Array, keyId: string, unwrappingKeyId: string, storage?: KeyValueStorage, memoryOnly?: boolean, useCBC?: boolean): Promise<void> => {\n    const unwrappingKey = await loadKey(unwrappingKeyId, storage)\n    const unwrappedKey = await _decrypt(key, unwrappingKey, useCBC)\n    keyCache[keyId] = unwrappedKey\n    if (memoryOnly) {\n        return\n    }\n    if (storage) {\n        await storage.saveBytes(keyId, unwrappedKey)\n    }\n}\n\nconst decrypt = async (data: Uint8Array, keyId: string, storage?: KeyValueStorage, useCBC?: boolean): Promise<Uint8Array> => {\n    const key = await loadKey(keyId, storage)\n    return _decrypt(data, key, useCBC)\n}\n\nfunction hash(data: Uint8Array): Promise<Uint8Array> {\n    const hash = createHmac('sha512', data).update('KEEPER_SECRETS_MANAGER_CLIENT_ID').digest()\n    return Promise.resolve(hash)\n}\n\nconst publicEncrypt = async (data: Uint8Array, key: Uint8Array, id?: Uint8Array): Promise<Uint8Array> => {\n    const ecdh = createECDH('prime256v1')\n    ecdh.generateKeys()\n    const ephemeralPublicKey = ecdh.getPublicKey()\n    const sharedSecret = ecdh.computeSecret(key)\n    const sharedSecretCombined = Buffer.concat([sharedSecret, id || new Uint8Array()])\n    const symmetricKey = createHash('SHA256').update(sharedSecretCombined).digest()\n    const encryptedData = await _encrypt(data, symmetricKey)\n    return Buffer.concat([ephemeralPublicKey, encryptedData])\n}\n\nconst fetchData = (res, resolve) => {\n    const retVal = {\n        statusCode: res.statusCode,\n        headers: res.headers,\n        data: null\n    }\n    res.on('data', data => {\n        retVal.data = retVal.data\n            ? Buffer.concat([retVal.data, data])\n            : data\n    })\n    res.on('end', () => {\n        resolve(retVal)\n    })\n}\n\nconst get = (\n    url: string,\n    headers?: { [key: string]: string }\n): Promise<KeeperHttpResponse> => new Promise<KeeperHttpResponse>((resolve, reject) => {\n    const get = request(url, {\n        method: 'get',\n        headers: {\n            'User-Agent': `Node/${process.version}`,\n            ...headers\n        }\n    }, (res) => {\n        fetchData(res, resolve)\n    })\n    get.on('error', reject)\n    get.end()\n})\n\nconst post = (\n    url: string,\n    payload: Uint8Array,\n    headers?: { [key: string]: string },\n    allowUnverifiedCertificate?: boolean\n): Promise<KeeperHttpResponse> => new Promise<KeeperHttpResponse>((resolve, reject) => {\n    const options: RequestOptions = {\n        rejectUnauthorized: !allowUnverifiedCertificate\n    }\n    const post = request(url, {\n        method: 'post',\n        ...options,\n        headers: {\n            'Content-Type': 'application/octet-stream',\n            'Content-Length': payload.length,\n            'User-Agent': `Node/${process.version}`,\n            ...headers,\n        },\n    }, (res) => {\n        fetchData(res, resolve)\n    })\n    post.on('error', reject)\n    post.write(payload)\n    post.end()\n})\n\nconst fileUpload = (\n    url: string,\n    uploadParameters: { [key: string]: string },\n    data: Uint8Array\n): Promise<any> => new Promise<any>((resolve, reject) => {\n    const boundary = `----------${Date.now()}`\n    const boundaryBytes = stringToBytes(`\\r\\n--${boundary}`)\n    let post = https.request(url, {\n        method: \"post\",\n        headers: {\n            'Content-Type': `multipart/form-data; boundary=${boundary}`,\n        }\n    });\n    post.on('response', function (res: any) {\n        resolve({\n            headers: res.headers,\n            statusCode: res.statusCode,\n            statusMessage: res.statusMessage\n        })\n    })\n    post.on('error', reject)\n    for (const key in uploadParameters) {\n        post.write(boundaryBytes)\n        post.write(stringToBytes(`\\r\\nContent-Disposition: form-data; name=\\\"${key}\\\"\\r\\n\\r\\n${uploadParameters[key]}`))\n    }\n    post.write(boundaryBytes)\n    post.write(stringToBytes(`\\r\\nContent-Disposition: form-data; name=\\\"file\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n`))\n    post.write(data)\n    post.write(boundaryBytes)\n    post.write(stringToBytes(`--\\r\\n`))\n    post.end()\n})\n\nconst cleanKeyCache = () => {\n    for (const key in keyCache) {\n        delete keyCache[key]\n    }\n}\n\nconst hasKeysCached = (): boolean => {\n    return Object.keys(keyCache).length > 0\n}\n\nconst getHmacDigest = async (algorithm: string, secret: Uint8Array, message: Uint8Array): Promise<Uint8Array> => {\n    // although once part of Google Key Uri Format - https://github.com/google/google-authenticator/wiki/Key-Uri-Format/_history\n    // removed MD5 as unreliable - only digests of length >= 20 can be used (MD5 has a digest length of 16)\n    let digest = new Uint8Array()\n    const algo = algorithm.toUpperCase().trim()\n    if (['SHA1', 'SHA256', 'SHA512'].includes(algo))\n        digest = createHmac(algo, secret).update(message).digest()\n\n    return Promise.resolve(digest)\n}\n\n// Returns a sufficiently random number in the range [0, max) i.e. 0 <= number < max\nconst getRandomNumber = async (n: number): Promise<number> => {\n    const uint32Max = Math.pow(2, 32) - 1\n    const limit = uint32Max - uint32Max % n\n    let values = new Uint32Array(1)\n    do {\n        const randomBytes = getRandomBytes(4)\n        values = new Uint32Array(randomBytes.buffer)\n    } while (values[0] > limit)\n    return Promise.resolve(values[0] % n)\n}\n\n// Given a character set, this function will return one sufficiently random character from the charset.\nconst getRandomCharacterInCharset = async (charset: string): Promise<string> => {\n    const count = charset.length\n    const pos = await getRandomNumber(count)\n    return Promise.resolve(charset[pos])\n}\n\nexport const nodePlatform: Platform = {\n    bytesToBase64: bytesToBase64,\n    base64ToBytes: base64ToBytes,\n    bytesToString: bytesToString,\n    stringToBytes: stringToBytes,\n    getRandomBytes: getRandomBytes,\n    generatePrivateKey: generatePrivateKey,\n    exportPublicKey: exportPublicKey,\n    importKey: importKey,\n    unwrap: unwrap,\n    encrypt: encrypt,\n    encryptWithKey: _encrypt,\n    decrypt: decrypt,\n    decryptWithKey: _decrypt,\n    hash: hash,\n    publicEncrypt: publicEncrypt,\n    sign: sign,\n    get: get,\n    post: post,\n    fileUpload: fileUpload,\n    cleanKeyCache: cleanKeyCache,\n    hasKeysCached: hasKeysCached,\n    getHmacDigest: getHmacDigest,\n    getRandomNumber: getRandomNumber,\n    getRandomCharacterInCharset: getRandomCharacterInCharset\n}","import {KeeperSecrets} from './keeper'\nimport {tryParseInt, webSafe64ToBytes} from './utils'\n\ntype KeeperField = {\n    type: string\n    label?: string\n    value: any[]\n}\n\nexport function getValue(secrets: KeeperSecrets, notation: string): any {\n    const parsedNotation = parseNotation(notation, true) // prefix, record, selector, footer\n    if (parsedNotation.length < 3)\n        throw Error(`Invalid notation ${notation}`)\n\n    if (parsedNotation[2].text == null)\n        throw Error(`Invalid notation ${notation}`)\n    const selector = parsedNotation[2].text[0] // type|title|notes or file|field|custom_field\n    if (parsedNotation[1].text == null)\n        throw Error(`Invalid notation ${notation}`)\n    const recordToken = parsedNotation[1].text[0] // UID or Title\n    const record = secrets.records.find(x => x.recordUid === recordToken || x.data.title === recordToken)\n    if (!record)\n        throw Error(`Record '${recordToken}' not found`)\n\n    const parameter = parsedNotation[2]?.parameter?.at(0) ?? null\n    const index1 = parsedNotation[2]?.index1?.at(0) ?? null\n    const index2 = parsedNotation[2]?.index2?.at(0) ?? null\n\n    switch (selector.toLowerCase()) {\n        case 'type': return record.data.type ?? ''\n        case 'title': return record.data.title ?? ''\n        case 'notes': return record.data.notes ?? ''\n        case 'file': {\n            if (parameter == null)\n                throw Error(`Notation error - Missing required parameter: filename or file UID for files in record '${recordToken}'`)\n            if ((record?.files?.length ?? 0) < 1)\n                throw Error(`Notation error - Record ${recordToken} has no file attachments.`)\n            let files = record.files ?? []\n            files = files.filter(x => parameter == x.data?.name || parameter == x.data?.title || parameter == x.fileUid)\n            // file searches do not use indexes and rely on unique file names or fileUid\n            if ((files?.length ?? 0) < 1)\n                throw Error(`Notation error - Record ${recordToken} has no files matching the search criteria '${parameter}'`)\n\n            // legacy compat. mode\n            return files[0]\n            // if ((files?.length ?? 0) > 1)\n            //     throw Error(`Notation error - Record ${recordToken} has multiple files matching the search criteria '${parameter}'`)\n            // try {\n            //     const contents = await downloadFile(files[0])\n            //     const text = webSafe64FromBytes(contents)\n            //     return text\n            // } catch (e) { throw Error(`Notation error - download failed for Record: ${recordToken}, File: ${parameter}, FileUID: ${files[0].fileUid}, Message: ${e}`)}\n        }\n        case 'field':\n        case 'custom_field': {\n            if (parameter == null)\n                throw Error(`Notation error - Missing required parameter for the field (type or label): ex. /field/type or /custom_field/MyLabel`)\n\n            const fields = (selector.toLowerCase() == 'field' ? record.data.fields :\n                selector.toLowerCase() == 'custom_field' ? record.data.custom : null)\n            if (!fields)\n                throw new Error(`Notation error - Expected /field or /custom_field but found /${selector}`)\n\n            // legacy compat mode - find first field only\n            const field = fields.find(x => parameter === x.type || parameter === x.label)\n            if (!field)\n                throw new Error(`Field ${parameter} not found in the record ${record.recordUid}`)\n\n            // /<type|label>[index1][index2], ex. /url == /url[] == /url[][] == full value\n            const idx = tryParseInt(index1 || '', -1) // -1 = full value\n            // valid only if [] or missing - ex. /field/phone or /field/phone[]\n            if (idx == -1 && !(parsedNotation[2].index1 == null || parsedNotation[2].index1[1] == '' || parsedNotation[2].index1[1] == '[]'))\n                throw new Error(`Notation error - Invalid field index ${idx}.`)\n\n            let values = (field?.value != null ? field.value as Object[] : [] as Object[])\n            if (idx >= values.length)\n                throw new Error(`Notation error - Field index out of bounds ${idx} >= ${values.length} for field '${parameter}' in record '${record.recordUid}'`)\n            if (idx >= 0) // single index\n                values = [ values[idx] ]\n\n            const fullObjValue = (parsedNotation[2].index2 == null || parsedNotation[2].index2[1] == '' || parsedNotation[2].index2[1] == '[]')\n            let objPropertyName = ''\n            if (parsedNotation[2].index2 != null)\n                objPropertyName = parsedNotation[2].index2[0]\n\n            // legacy compatibility mode - no indexes, ex. /url returns value[0]\n            if ((parsedNotation[2].index1 == null || parsedNotation[2].index1[1] == '') &&\n                    (parsedNotation[2].index2 == null || parsedNotation[2].index2[1] == ''))\n                return values[0] // legacy compatibility\n                // return (typeof values[0] === 'string' ? values[0] as string : JSON.stringify(values[0]))\n\n            // legacy compatibility mode - empty index, ex. /url[] returns [\"value\"]\n            if ('[]' == (parsedNotation[2]?.index1?.at(1) ?? '') && (index2 == null || index2 == ''))\n                return values // legacy compatibility\n                // return JSON.stringify(values)\n                // should be handled by parseNotation w/ legacyMode=true converts /name[middle] to name[][middle]\n\n            // legacy compatibility mode - index2 only, ex. /name[first] returns value[0][first]\n            if ((index1 ?? '') == '' && (index2 ?? '') != '')\n                return values[0][index2 ?? ''] // legacy compatibility\n                // return values[0].getProperty(objPropertyName)\n\n            if (fullObjValue) {\n                return idx >= 0 ? values[0] : values // legacy compatibility\n            } else if (values[0] != null) {\n                if (objPropertyName in values[0]) {\n                    let propKey = objPropertyName as keyof typeof values[0]\n                    const propValue = values[0][propKey]\n                    return propValue // legacy compatibility\n                } else\n                    throw Error(`Notation error - value object has no property '${objPropertyName}'`)\n            } else\n                throw Error(`Notation error - Cannot extract property '${objPropertyName}' from null value.`)\n            return ''\n        }\n        default: throw Error(`Invalid notation ${notation}`)\n    }\n}\n\n// data class to represent parsed notation section\ntype StringTuple = [string, string]\nclass NotationSection {\n    section: string     // section name - ex. prefix\n    isPresent: boolean  // presence flag\n    startPos: number    // section start position in URI\n    endPos: number      // section end position in URI\n    text: StringTuple | null        // <unescaped, raw> text\n    parameter: StringTuple | null   // <field type>|<field label>|<file name>\n    index1: StringTuple | null      // numeric index [N] or []\n    index2: StringTuple | null      // property index - ex. field/name[0][middle]\n    constructor(sectionName: string) {\n        this.section = sectionName\n        this.isPresent = false\n        this.startPos = -1\n        this.endPos = -1\n        this.text = null\n        this.parameter = null\n        this.index1 = null\n        this.index2 = null\n    }\n}\n\nconst EscapeChar: number = '\\\\'.charCodeAt(0)\nconst EscapeChars: string = '/[]\\\\' // /[]\\ -> \\/ ,\\[, \\], \\\\\n// Escape the characters in plaintext sections only - title, label or filename\n\nfunction parseSubsection(text: string, pos: number, delimiters: string, escaped: boolean = false): StringTuple|null {\n    // raw string excludes start delimiter (if '/') but includes end delimiter or both (if '[',']')\n    if (!text || pos < 0 || pos >= text.length)\n        return null\n    if (!delimiters || delimiters.length > 2)\n        throw new Error(`Notation parser: Internal error - Incorrect delimiters count. Delimiters: '${delimiters}'`)\n\n    let token = ''\n    let raw = ''\n    while (pos < text.length) {\n        if (escaped && EscapeChar == text.charCodeAt(pos)) {\n            // notation cannot end in single char incomplete escape sequence\n            // and only escape_chars should be escaped\n            if (((pos + 1) >= text.length) || !EscapeChars.includes(text[pos + 1]))\n                throw new Error(`Notation parser: Incorrect escape sequence at position ${pos}`)\n            // copy the properly escaped character\n            token += text[pos + 1]\n            raw += text[pos] + text[pos + 1]\n            pos += 2\n        } else { // escaped == false || EscapeChar != text.charCodeAt(pos)\n            raw += text[pos] // delimiter is included in raw text\n            if (delimiters.length == 1) {\n                if (text[pos] == delimiters[0])\n                    break\n                else\n                    token += text[pos]\n            } else { // 2 delimiters\n                if (raw[0] != delimiters[0])\n                    throw new Error(`Notation parser: Index sections must start with '['`)\n                if (raw.length > 1 && text[pos] == delimiters[0])\n                    throw new Error(`Notation parser: Index sections do not allow extra '[' inside.`)\n                if (!delimiters.includes(text[pos]))\n                    token += text[pos]\n                else if (text[pos] == delimiters[1])\n                    break\n            }\n            pos++\n        }\n    }\n    //pos = (pos < text.length) ? pos : text.length - 1\n    if (delimiters.length == 2 && (\n        (raw.length < 2 || raw[0] != delimiters[0] || raw[raw.length - 1] != delimiters[1]) ||\n        (escaped && raw.charCodeAt(raw.length - 2) == EscapeChar)))\n    throw new Error(`Notation parser: Index sections must be enclosed in '[' and ']'`)\n\n    const result: StringTuple = [token, raw]\n    return result\n}\n\nfunction parseSection(notation: string, section: string, pos: number): NotationSection {\n    if (!notation)\n        throw new Error(`Keeper notation parsing error - missing notation URI`)\n\n    const sectionName = section.toLowerCase()\n    const sections = ['prefix', 'record', 'selector', 'footer']\n    if (!sections.includes(sectionName))\n        throw new Error(`Keeper notation parsing error - unknown section: '${sectionName}'`)\n\n    const result = new NotationSection(section)\n    result.startPos = pos\n\n    switch (sectionName) {\n        case 'prefix': {\n            // prefix 'keeper://' is not mandatory\n            const uriPrefix: string = 'keeper://'\n            if (notation.toLowerCase().startsWith(uriPrefix)) {\n                result.isPresent = true\n                result.startPos = 0\n                result.endPos = uriPrefix.length - 1\n                result.text = [notation.substring(0, uriPrefix.length), notation.substring(0, uriPrefix.length)]\n            }\n            break\n        }\n        case 'footer': {\n            // footer should not be present - used only for verification\n            result.isPresent = (pos < notation.length)\n            if (result.isPresent) {\n                result.startPos = pos\n                result.endPos = notation.length - 1\n                result.text = [notation.substring(pos), notation.substring(pos)]\n            }\n            break\n        }\n        case 'record': {\n            // record is always present - either UID or title\n            result.isPresent = (pos < notation.length)\n            if (result.isPresent)\n            {\n                const parsed = parseSubsection(notation, pos, '/', true)\n                if (parsed != null)\n                {\n                    result.startPos = pos\n                    result.endPos = pos + parsed[1].length - 1\n                    result.text = parsed\n                }\n            }\n            break\n        }\n        case 'selector': {\n            // selector is always present - type|title|notes | field|custom_field|file\n            result.isPresent = (pos < notation.length)\n            if (result.isPresent) {\n                let parsed = parseSubsection(notation, pos, '/', false)\n                if (parsed != null) {\n                    result.startPos = pos\n                    result.endPos = pos + parsed[1].length - 1\n                    result.text = parsed\n\n                    // selector.parameter - <field type>|<field label> | <file name>\n                    // field/name[0][middle], custom_field/my label[0][middle], file/my file[0]\n                    const longSelectors = ['field', 'custom_field', 'file']\n                    if (longSelectors.includes(parsed[0].toLowerCase())) {\n                        // TODO: File metadata extraction: ex. filename[1][size] - that requires filename to be escaped\n                        parsed = parseSubsection(notation, result.endPos + 1, '[', true)\n                        if (parsed != null) {\n                            result.parameter = parsed // <field type>|<field label> | <filename>\n                            const plen = parsed[1].length - (parsed[1].endsWith('[') && !parsed[1].endsWith('\\\\[') ? 1 : 0)\n                            result.endPos += plen\n\n                            parsed = parseSubsection(notation, result.endPos + 1, '[]', true)\n                            if (parsed != null) {\n                                result.index1 = parsed // selector.index1 [int] or []\n                                result.endPos += parsed[1].length\n                                parsed = parseSubsection(notation, result.endPos + 1, '[]', true)\n                                if (parsed != null)\n                                {\n                                    result.index2 = parsed // selector.index2 [str]\n                                    result.endPos += parsed[1].length\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            break\n        }\n        default: throw new Error(`Keeper notation parsing error - unknown section: ${sectionName}`)\n    }\n\n    return result\n}\n\nexport function parseNotation(notation: string, legacyMode: boolean = false): NotationSection[] {\n    if (!notation)\n        throw new Error('Keeper notation is missing or invalid.')\n\n    // Notation is either plaintext keeper URI format or URL safe base64 string (UTF8)\n    // auto detect format - '/' is not part of base64 URL safe alphabet\n    if (!notation.includes('/')) {\n        try {\n            var bytes = webSafe64ToBytes(notation)\n            var plaintext = new TextDecoder('utf-8').decode(bytes)\n            notation = plaintext\n        }\n        catch (Exception) {\n            throw new Error('Keeper notation is in invalid format - plaintext URI or URL safe base64 string expected.')\n        }\n    }\n\n    const prefix = parseSection(notation, 'prefix', 0) // keeper://\n    let pos = (prefix.isPresent ? prefix.endPos + 1 : 0) // prefix is optional\n    const record = parseSection(notation, 'record', pos) // <UID> or <Title>\n    pos = (record.isPresent ? record.endPos + 1 : notation.length) // record is required\n    const selector = parseSection(notation, 'selector', pos) // type|title|notes | field|custom_field|file\n    pos = (selector.isPresent ? selector.endPos + 1 : notation.length) // selector is required, indexes are optional\n    const footer = parseSection(notation, 'footer', pos) // Any text after the last section\n\n    // verify parsed query\n    // prefix is optional, record UID/Title and selector are mandatory\n    const shortSelectors = ['type', 'title', 'notes']\n    const fullSelectors = ['field', 'custom_field', 'file']\n    const selectors = ['type', 'title', 'notes', 'field', 'custom_field', 'file']\n    if (!record.isPresent || !selector.isPresent)\n        throw new Error('Keeper notation URI missing information about the uid, file, field type, or field key.')\n    if (footer.isPresent)\n        throw new Error('Keeper notation is invalid - extra characters after last section.')\n    if (selector.text == null || !selectors.includes(selector.text[0].toLowerCase()))\n        throw new Error('Keeper notation is invalid - bad selector, must be one of (type, title, notes, field, custom_field, file).')\n    if (selector.text != null && shortSelectors.includes(selector.text[0].toLowerCase()) && selector.parameter != null)\n        throw new Error('Keeper notation is invalid - selectors (type, title, notes) do not have parameters.')\n    if (selector.text != null && fullSelectors.includes(selector.text[0].toLowerCase())) {\n        if (selector.parameter == null)\n            throw new Error('Keeper notation is invalid - selectors (field, custom_field, file) require parameters.')\n        if ('file' == selector.text[0].toLowerCase() && (selector.index1 != null || selector.index2 != null))\n            throw new Error('Keeper notation is invalid - file selectors don\\'t accept indexes.')\n        if ('file' != selector.text[0].toLowerCase() && selector.index1 == null && selector.index2 != null)\n            throw new Error('Keeper notation is invalid - two indexes required.')\n        if (selector.index1 != null && !/^\\[\\d*\\]$/.test(selector.index1[1]))\n        {\n            if (!legacyMode)\n                throw new Error('Keeper notation is invalid - first index must be numeric: [n] or [].')\n            if (selector.index2 == null)\n            {   // in legacy mode convert /name[middle] to name[][middle]\n                selector.index2 = selector.index1\n                selector.index1 = ['', '[]']\n            }\n        }\n    }\n\n    const result: NotationSection[] = [prefix, record, selector, footer]\n    return result\n}\n","import {EncryptedPayload, KeeperHttpResponse, KeyValueStorage, platform, TransmissionKey} from './platform'\nimport {webSafe64FromBytes, webSafe64ToBytes, tryParseInt} from './utils'\nimport {parseNotation} from './notation'\n\nexport {KeyValueStorage} from './platform'\n\nlet packageVersion = '[VI]{version}[/VI]'\nconst KEY_HOSTNAME = 'hostname' // base url for the Secrets Manager service\nconst KEY_SERVER_PUBLIC_KEY_ID = 'serverPublicKeyId'\nconst KEY_CLIENT_ID = 'clientId'\nconst KEY_CLIENT_KEY = 'clientKey' // The key that is used to identify the client before public key\nconst KEY_APP_KEY = 'appKey' // The application key with which all secrets are encrypted\nconst KEY_OWNER_PUBLIC_KEY = 'appOwnerPublicKey' // The application owner public key, to create records\nconst KEY_PRIVATE_KEY = 'privateKey' // The client's private key\nconst CLIENT_ID_HASH_TAG = 'KEEPER_SECRETS_MANAGER_CLIENT_ID' // Tag for hashing the client key to client id\n\nlet keeperPublicKeys: Record<number, Uint8Array>\n\nexport const initialize = (pkgVersion?: string) => {\n    if (pkgVersion) {\n        packageVersion = pkgVersion\n    }\n    let keyNumber = 7\n    keeperPublicKeys = [\n        'BK9w6TZFxE6nFNbMfIpULCup2a8xc6w2tUTABjxny7yFmxW0dAEojwC6j6zb5nTlmb1dAx8nwo3qF7RPYGmloRM',\n        'BKnhy0obglZJK-igwthNLdknoSXRrGB-mvFRzyb_L-DKKefWjYdFD2888qN1ROczz4n3keYSfKz9Koj90Z6w_tQ',\n        'BAsPQdCpLIGXdWNLdAwx-3J5lNqUtKbaOMV56hUj8VzxE2USLHuHHuKDeno0ymJt-acxWV1xPlBfNUShhRTR77g',\n        'BNYIh_Sv03nRZUUJveE8d2mxKLIDXv654UbshaItHrCJhd6cT7pdZ_XwbdyxAOCWMkBb9AZ4t1XRCsM8-wkEBRg',\n        'BA6uNfeYSvqagwu4TOY6wFK4JyU5C200vJna0lH4PJ-SzGVXej8l9dElyQ58_ljfPs5Rq6zVVXpdDe8A7Y3WRhk',\n        'BMjTIlXfohI8TDymsHxo0DqYysCy7yZGJ80WhgOBR4QUd6LBDA6-_318a-jCGW96zxXKMm8clDTKpE8w75KG-FY',\n        'BJBDU1P1H21IwIdT2brKkPqbQR0Zl0TIHf7Bz_OO9jaNgIwydMkxt4GpBmkYoprZ_DHUGOrno2faB7pmTR7HhuI',\n        'BJFF8j-dH7pDEw_U347w2CBM6xYM8Dk5fPPAktjib-opOqzvvbsER-WDHM4ONCSBf9O_obAHzCyygxmtpktDuiE',\n        'BDKyWBvLbyZ-jMueORl3JwJnnEpCiZdN7yUvT0vOyjwpPBCDf6zfL4RWzvSkhAAFnwOni_1tQSl8dfXHbXqXsQ8',\n        'BDXyZZnrl0tc2jdC5I61JjwkjK2kr7uet9tZjt8StTiJTAQQmnVOYBgbtP08PWDbecxnHghx3kJ8QXq1XE68y8c',\n        'BFX68cb97m9_sweGdOVavFM3j5ot6gveg6xT4BtGahfGhKib-zdZyO9pwvv1cBda9ahkSzo1BQ4NVXp9qRyqVGU'\n    ].reduce((keys, key) => {\n        keys[keyNumber++] = webSafe64ToBytes(key)\n        return keys\n    }, {})\n}\n\nexport type SecretManagerOptions = {\n    storage: KeyValueStorage\n    queryFunction?: (url: string, transmissionKey: TransmissionKey, payload: EncryptedPayload, allowUnverifiedCertificate?: boolean) => Promise<KeeperHttpResponse>\n    allowUnverifiedCertificate?: boolean\n}\n\nexport type QueryOptions = {\n    recordsFilter?: string[]\n    foldersFilter?: string[]\n}\n\nexport type CreateOptions = {\n    folderUid: string\n    subFolderUid?: string\n}\n\ntype AnyPayload =\n    GetPayload\n    | DeletePayload\n    | DeleteFolderPayload\n    | UpdatePayload\n    | CreatePayload\n    | CreateFolderPayload\n    | UpdateFolderPayload\n    | FileUploadPayload\n\ntype CommonPayload = {\n    clientVersion: string\n    clientId: string\n}\n\ntype GetPayload = CommonPayload & {\n    publicKey?: string   // passed once when binding\n    requestedRecords?: string[] // only return these records\n    requestedFolders?: string[] // only return these folders\n}\n\ntype DeletePayload = CommonPayload & {\n    recordUids: string[]\n}\n\ntype DeleteFolderPayload = CommonPayload & {\n    folderUids: string[]\n    forceDeletion: boolean\n}\n\ntype UpdatePayload = CommonPayload & {\n    recordUid: string\n    data: string\n    revision: number\n}\n\ntype CreatePayload = CommonPayload & {\n    recordUid: string\n    recordKey: string\n    folderUid: string\n    folderKey: string\n    data: string,\n    subFolderUid?: string\n}\n\ntype CreateFolderPayload = CommonPayload & {\n    folderUid: string\n    sharedFolderUid: string\n    sharedFolderKey: string\n    data: string\n    parentUid?: string\n}\n\ntype UpdateFolderPayload = CommonPayload & {\n    folderUid: string\n    data: string\n}\n\ntype FileUploadPayload = CommonPayload & {\n    fileRecordUid: string\n    fileRecordKey: string\n    fileRecordData: string\n    ownerRecordUid: string\n    ownerRecordData: string\n    linkKey: string\n    fileSize: number\n}\n\ntype SecretsManagerDeleteResponseRecord = {\n    errorMessage: string\n    recordUid: string\n    responseCode: string\n}\n\ntype SecretsManagerDeleteResponseFolder =  {\n    errorMessage: string\n    folderUid: string\n    responseCode: string\n}\n\ntype SecretsManagerResponseFolder = {\n    folderUid: string\n    folderKey: string\n    data: string\n    parent: string\n    revision: number\n    records: SecretsManagerResponseRecord[]\n}\n\ntype SecretsManagerResponseRecord = {\n    recordUid: string\n    recordKey: string\n    data: string\n    revision: number\n    files: SecretsManagerResponseFile[]\n    innerFolderUid: string\n}\n\ntype SecretsManagerResponseFile = {\n    fileUid: string\n    fileKey: string\n    data: string\n    url: string\n    thumbnailUrl: string\n}\n\ntype SecretsManagerResponse = {\n    appData: string\n    encryptedAppKey?: string  // received only on the first response\n    appOwnerPublicKey?: string   // received only on the first response\n    folders: SecretsManagerResponseFolder[]\n    records: SecretsManagerResponseRecord[]\n    expiresOn: number\n    warnings: string[]\n    extra?: {}\n}\n\ntype SecretsManagerDeleteResponse = {\n    records: SecretsManagerDeleteResponseRecord[]\n    folders: SecretsManagerDeleteResponseFolder[]\n}\n\ntype SecretsManagerAddFileResponse = {\n    url: string\n    parameters: string\n    successStatusCode: number\n}\n\nexport type KeeperSecrets = {\n    appData: {\n        title: string\n        type: string\n    }\n    expiresOn?: Date\n    records: KeeperRecord[]\n    warnings?: string[]\n    extra?: {}\n}\n\nexport type KeeperRecord = {\n    recordUid: string\n    folderUid?: string\n    innerFolderUid?: string\n    data: any\n    revision: number\n    files?: KeeperFile[]\n}\n\nexport type KeeperFolder = {\n    folderUid: string\n    parentUid?: string\n    name?: string\n}\n\nexport type KeeperFile = {\n    fileUid: string\n    data: any\n    url?: string\n    thumbnailUrl?: string\n}\n\nexport type KeeperFileUpload = {\n    name: string\n    title: string\n    type?: string\n    data: Uint8Array\n}\n\ntype KeeperError = {\n    error?: string\n    key_id?: number\n}\n\nconst prepareGetPayload = async (storage: KeyValueStorage, queryOptions?: QueryOptions): Promise<GetPayload> => {\n    const clientId = await storage.getString(KEY_CLIENT_ID)\n    if (!clientId) {\n        throw new Error('Client Id is missing from the configuration')\n    }\n    const payload: GetPayload = {\n        clientVersion: 'ms' + packageVersion,\n        clientId: clientId\n    }\n    const appKey = await storage.getBytes(KEY_APP_KEY)\n    if (!appKey) {\n        const publicKey = await platform.exportPublicKey(KEY_PRIVATE_KEY, storage)\n        payload.publicKey = platform.bytesToBase64(publicKey)\n    }\n    if (queryOptions?.recordsFilter) {\n        payload.requestedRecords = queryOptions.recordsFilter\n    }\n    if (queryOptions?.foldersFilter) {\n        payload.requestedFolders = queryOptions.foldersFilter\n    }\n    return payload\n}\n\nconst prepareUpdatePayload = async (storage: KeyValueStorage, record: KeeperRecord): Promise<UpdatePayload> => {\n    const clientId = await storage.getString(KEY_CLIENT_ID)\n    if (!clientId) {\n        throw new Error('Client Id is missing from the configuration')\n    }\n    const recordBytes = platform.stringToBytes(JSON.stringify(record.data))\n    const encryptedRecord = await platform.encrypt(recordBytes, record.recordUid)\n    return {\n        clientVersion: 'ms' + packageVersion,\n        clientId: clientId,\n        recordUid: record.recordUid,\n        data: webSafe64FromBytes(encryptedRecord),\n        revision: record.revision\n    }\n}\n\nconst prepareDeletePayload = async (storage: KeyValueStorage, recordUids: string[]): Promise<DeletePayload> => {\n    const clientId = await storage.getString(KEY_CLIENT_ID)\n    if (!clientId) {\n        throw new Error('Client Id is missing from the configuration')\n    }\n    return {\n        clientVersion: 'ms' + packageVersion,\n        clientId: clientId,\n        recordUids: recordUids\n    }\n}\n\nconst prepareDeleteFolderPayload = async (storage: KeyValueStorage, folderUids: string[], forceDeletion: boolean = false): Promise<DeleteFolderPayload> => {\n    const clientId = await storage.getString(KEY_CLIENT_ID)\n    if (!clientId) {\n        throw new Error('Client Id is missing from the configuration')\n    }\n    return {\n        clientVersion: 'ms' + packageVersion,\n        clientId: clientId,\n        folderUids: folderUids,\n        forceDeletion: forceDeletion\n    }\n}\n\nconst prepareCreatePayload = async (storage: KeyValueStorage, createOptions: CreateOptions, recordData: any): Promise<CreatePayload> => {\n    const clientId = await storage.getString(KEY_CLIENT_ID)\n    if (!clientId) {\n        throw new Error('Client Id is missing from the configuration')\n    }\n    const ownerPublicKey = await storage.getBytes(KEY_OWNER_PUBLIC_KEY)\n    if (!ownerPublicKey) {\n        throw new Error('Application owner public key is missing from the configuration')\n    }\n    const recordBytes = platform.stringToBytes(JSON.stringify(recordData))\n    const recordKey = platform.getRandomBytes(32)\n    const recordUid = platform.getRandomBytes(16)\n    const encryptedRecord = await platform.encryptWithKey(recordBytes, recordKey)\n    const encryptedRecordKey = await platform.publicEncrypt(recordKey, ownerPublicKey)\n    const encryptedFolderKey = await platform.encrypt(recordKey, createOptions.folderUid)\n    return {\n        clientVersion: 'ms' + packageVersion,\n        clientId: clientId,\n        recordUid: webSafe64FromBytes(recordUid),\n        recordKey: platform.bytesToBase64(encryptedRecordKey),\n        folderUid: createOptions.folderUid,\n        folderKey: platform.bytesToBase64(encryptedFolderKey),\n        data: webSafe64FromBytes(encryptedRecord),\n        subFolderUid: createOptions.subFolderUid\n    }\n}\n\nconst prepareCreateFolderPayload = async (storage: KeyValueStorage, createOptions: CreateOptions, folderName: string): Promise<CreateFolderPayload> => {\n    const clientId = await storage.getString(KEY_CLIENT_ID)\n    if (!clientId) {\n        throw new Error('Client Id is missing from the configuration')\n    }\n    const folderDataBytes = platform.stringToBytes(JSON.stringify({\n        name: folderName\n    }))\n    const folderKey = platform.getRandomBytes(32)\n    const folderUid = platform.getRandomBytes(16)\n    const encryptedFolderData = await platform.encryptWithKey(folderDataBytes, folderKey, true)\n    const encryptedFolderKey = await platform.encrypt(folderKey, createOptions.folderUid, undefined, true)\n    return {\n        clientVersion: 'ms' + packageVersion,\n        clientId: clientId,\n        folderUid: webSafe64FromBytes(folderUid),\n        sharedFolderUid: createOptions.folderUid,\n        sharedFolderKey: webSafe64FromBytes(encryptedFolderKey),\n        data: webSafe64FromBytes(encryptedFolderData),\n        parentUid: createOptions.subFolderUid\n    }\n}\n\nconst prepareUpdateFolderPayload = async (storage: KeyValueStorage, folderUid: string, folderName: string): Promise<UpdateFolderPayload> => {\n    const clientId = await storage.getString(KEY_CLIENT_ID)\n    if (!clientId) {\n        throw new Error('Client Id is missing from the configuration')\n    }\n    const folderDataBytes = platform.stringToBytes(JSON.stringify({\n        name: folderName\n    }))\n    const encryptedFolderData = await platform.encrypt(folderDataBytes, folderUid, undefined, true)\n    return {\n        clientVersion: 'ms' + packageVersion,\n        clientId: clientId,\n        folderUid: folderUid,\n        data: webSafe64FromBytes(encryptedFolderData)\n    }\n}\n\nconst prepareFileUploadPayload = async (storage: KeyValueStorage, ownerRecord: KeeperRecord, file: KeeperFileUpload): Promise<{\n    payload: FileUploadPayload,\n    encryptedFileData: Uint8Array\n}> => {\n    const clientId = await storage.getString(KEY_CLIENT_ID)\n    if (!clientId) {\n        throw new Error('Client Id is missing from the configuration')\n    }\n    const ownerPublicKey = await storage.getBytes(KEY_OWNER_PUBLIC_KEY)\n    if (!ownerPublicKey) {\n        throw new Error('Application owner public key is missing from the configuration')\n    }\n    const fileData = {\n        name: file.name,\n        size: file.data.length,\n        title: file.title,\n        lastModified: new Date().getTime(),\n        type: file.type\n    }\n    const fileRecordBytes = platform.stringToBytes(JSON.stringify(fileData))\n    const fileRecordKey = platform.getRandomBytes(32)\n    const fileRecordUid = webSafe64FromBytes(platform.getRandomBytes(16))\n    const encryptedFileRecord = await platform.encryptWithKey(fileRecordBytes, fileRecordKey)\n    const encryptedFileRecordKey = await platform.publicEncrypt(fileRecordKey, ownerPublicKey)\n    const encryptedLinkKey = await platform.encrypt(fileRecordKey, ownerRecord.recordUid)\n    const encryptedFileData = await platform.encryptWithKey(file.data, fileRecordKey)\n\n    let fileRef = ownerRecord.data.fields.find(x => x.type == 'fileRef')\n    if (fileRef) {\n        fileRef.value.push(fileRecordUid)\n    } else {\n        fileRef = {type: 'fileRef', value: [fileRecordUid]}\n        ownerRecord.data.fields.push(fileRef)\n    }\n    const ownerRecordBytes = platform.stringToBytes(JSON.stringify(ownerRecord.data))\n    const encryptedOwnerRecord = await platform.encrypt(ownerRecordBytes, ownerRecord.recordUid)\n\n    return {\n        payload: {\n            clientVersion: 'ms' + packageVersion,\n            clientId: clientId,\n            fileRecordUid: fileRecordUid,\n            fileRecordKey: platform.bytesToBase64(encryptedFileRecordKey),\n            fileRecordData: webSafe64FromBytes(encryptedFileRecord),\n            ownerRecordUid: ownerRecord.recordUid,\n            ownerRecordData: webSafe64FromBytes(encryptedOwnerRecord),\n            linkKey: platform.bytesToBase64(encryptedLinkKey),\n            fileSize: encryptedFileData.length\n        },\n        encryptedFileData\n    }\n}\n\nconst postFunction = async (url: string, transmissionKey: TransmissionKey, payload: EncryptedPayload, allowUnverifiedCertificate?: boolean): Promise<KeeperHttpResponse> => {\n    return platform.post(url, payload.payload,\n        {\n            PublicKeyId: transmissionKey.publicKeyId.toString(),\n            TransmissionKey: platform.bytesToBase64(transmissionKey.encryptedKey),\n            Authorization: `Signature ${platform.bytesToBase64(payload.signature)}`\n        }, allowUnverifiedCertificate)\n}\n\nexport const generateTransmissionKey = async (storage: KeyValueStorage): Promise<TransmissionKey> => {\n    const transmissionKey = platform.getRandomBytes(32)\n    const keyNumberString = await storage.getString(KEY_SERVER_PUBLIC_KEY_ID)\n    const keyNumber = keyNumberString ? Number(keyNumberString) : 7\n    const keeperPublicKey = keeperPublicKeys[keyNumber]\n    if (!keeperPublicKey) {\n        throw new Error(`Key number ${keyNumber} is not supported`)\n    }\n    const encryptedKey = await platform.publicEncrypt(transmissionKey, keeperPublicKeys[keyNumber])\n    return {\n        publicKeyId: keyNumber,\n        key: transmissionKey,\n        encryptedKey: encryptedKey\n    }\n}\n\nconst encryptAndSignPayload = async (storage: KeyValueStorage, transmissionKey: TransmissionKey, payload: GetPayload | UpdatePayload | FileUploadPayload): Promise<EncryptedPayload> => {\n    const payloadBytes = platform.stringToBytes(JSON.stringify(payload))\n    const encryptedPayload = await platform.encryptWithKey(payloadBytes, transmissionKey.key)\n    const signatureBase = Uint8Array.of(...transmissionKey.encryptedKey, ...encryptedPayload)\n    const signature = await platform.sign(signatureBase, KEY_PRIVATE_KEY, storage)\n    return {payload: encryptedPayload, signature}\n}\n\nconst postQuery = async (options: SecretManagerOptions, path: string, payload: AnyPayload): Promise<Uint8Array> => {\n    const hostName = await options.storage.getString(KEY_HOSTNAME)\n    if (!hostName) {\n        throw new Error('hostname is missing from the configuration')\n    }\n    const url = `https://${hostName}/api/rest/sm/v1/${path}`\n    while (true) {\n        const transmissionKey = await generateTransmissionKey(options.storage)\n        const encryptedPayload = await encryptAndSignPayload(options.storage, transmissionKey, payload)\n        const response = await (options.queryFunction || postFunction)(url, transmissionKey, encryptedPayload, options.allowUnverifiedCertificate)\n        if (response.statusCode !== 200) {\n            let errorMessage\n            if (response.data) {\n                errorMessage = platform.bytesToString(response.data.slice(0, 1000))\n                try {\n                    const errorObj: KeeperError = JSON.parse(errorMessage)\n                    if (errorObj.error === 'key') {\n                        await options.storage.saveString(KEY_SERVER_PUBLIC_KEY_ID, errorObj.key_id!.toString())\n                        continue\n                    }\n                } catch {\n                }\n            } else {\n                errorMessage = `unknown ksm error, code ${response.statusCode}`\n            }\n            throw new Error(errorMessage)\n        }\n        return response.data\n            ? platform.decryptWithKey(response.data, transmissionKey.key)\n            : new Uint8Array()\n    }\n}\n\nconst decryptRecord = async (record: SecretsManagerResponseRecord, storage?: KeyValueStorage): Promise<KeeperRecord> => {\n    const decryptedRecord = await platform.decrypt(platform.base64ToBytes(record.data), record.recordUid || KEY_APP_KEY, storage)\n    const keeperRecord: KeeperRecord = {\n        recordUid: record.recordUid,\n        data: JSON.parse(platform.bytesToString(decryptedRecord)),\n        revision: record.revision,\n    }\n    if (record.innerFolderUid) {\n        keeperRecord.innerFolderUid = record.innerFolderUid\n    }\n    if (record.files) {\n        keeperRecord.files = []\n        for (const file of record.files) {\n            await platform.unwrap(platform.base64ToBytes(file.fileKey), file.fileUid, record.recordUid || KEY_APP_KEY)\n            const decryptedFile = await platform.decrypt(platform.base64ToBytes(file.data), file.fileUid)\n            keeperRecord.files.push({\n                fileUid: file.fileUid,\n                data: JSON.parse(platform.bytesToString(decryptedFile)),\n                url: file.url,\n                thumbnailUrl: file.thumbnailUrl\n            })\n        }\n    }\n    return keeperRecord\n}\n\nconst fetchAndDecryptSecrets = async (options: SecretManagerOptions, queryOptions?: QueryOptions): Promise<{ secrets: KeeperSecrets, justBound: boolean }> => {\n    const storage = options.storage\n    const payload = await prepareGetPayload(storage, queryOptions)\n    const responseData = await postQuery(options, 'get_secret', payload)\n    const response = JSON.parse(platform.bytesToString(responseData)) as SecretsManagerResponse\n\n    const records: KeeperRecord[] = []\n    let justBound = false\n    if (response.encryptedAppKey) {\n        justBound = true\n        await platform.unwrap(platform.base64ToBytes(response.encryptedAppKey), KEY_APP_KEY, KEY_CLIENT_KEY, storage)\n        await storage.delete(KEY_CLIENT_KEY)\n        await storage.saveString(KEY_OWNER_PUBLIC_KEY, response.appOwnerPublicKey!)\n    }\n    if (response.records) {\n        for (const record of response.records) {\n            if (record.recordKey) {\n                await platform.unwrap(platform.base64ToBytes(record.recordKey), record.recordUid, KEY_APP_KEY, storage, true)\n            }\n            const decryptedRecord = await decryptRecord(record, storage)\n            records.push(decryptedRecord)\n        }\n    }\n    if (response.folders) {\n        for (const folder of response.folders) {\n            await platform.unwrap(platform.base64ToBytes(folder.folderKey), folder.folderUid, KEY_APP_KEY, storage, true)\n            for (const record of folder.records) {\n                await platform.unwrap(platform.base64ToBytes(record.recordKey), record.recordUid, folder.folderUid)\n                const decryptedRecord = await decryptRecord(record)\n                decryptedRecord.folderUid = folder.folderUid\n                records.push(decryptedRecord)\n            }\n        }\n    }\n    let appData\n    if (response.appData) {\n        appData = JSON.parse(platform.bytesToString(await platform.decrypt(webSafe64ToBytes(response.appData), KEY_APP_KEY, storage)))\n    }\n    const secrets: KeeperSecrets = {\n        appData: appData,\n        expiresOn: response.expiresOn > 0 ? new Date(response.expiresOn) : undefined,\n        records: records\n    }\n    if (response.warnings && response.warnings.length > 0) {\n        secrets.warnings = response.warnings\n    }\n    if (response.extra && Object.keys(response.extra).length > 0) {\n        secrets.extra = response.extra\n    }\n    return {secrets, justBound}\n}\n\nconst getSharedFolderUid = (folders: SecretsManagerResponseFolder[], parent: string): string | undefined => {\n    while (true) {\n        const parentFolder = folders.find(x => x.folderUid === parent)\n        if (!parentFolder) {\n            return undefined\n        }\n        if (parentFolder.parent) {\n            parent = parentFolder.parent\n        } else {\n            return parent\n        }\n    }\n};\n\nconst fetchAndDecryptFolders = async (options: SecretManagerOptions): Promise<KeeperFolder[]> => {\n    const storage = options.storage\n    const payload = await prepareGetPayload(storage)\n    const responseData = await postQuery(options, 'get_folders', payload)\n    const response = JSON.parse(platform.bytesToString(responseData)) as SecretsManagerResponse\n    const folders: KeeperFolder[] = []\n    if (response.folders) {\n        for (const folder of response.folders) {\n            let decryptedData: Uint8Array\n            const decryptedFolder: KeeperFolder = {\n                folderUid: folder.folderUid\n            }\n            if (folder.parent) {\n                decryptedFolder.parentUid = folder.parent\n                const sharedFolderUid = getSharedFolderUid(response.folders, folder.parent)\n                if (!sharedFolderUid) {\n                    throw new Error('Folder data inconsistent - unable to locate shared folder')\n                }\n                await platform.unwrap(platform.base64ToBytes(folder.folderKey), folder.folderUid, sharedFolderUid, storage, true, true)\n                decryptedData = await platform.decrypt(platform.base64ToBytes(folder.data), folder.folderUid, storage, true)\n            } else {\n                await platform.unwrap(platform.base64ToBytes(folder.folderKey), folder.folderUid, KEY_APP_KEY, storage, true)\n                decryptedData = await platform.decrypt(platform.base64ToBytes(folder.data), folder.folderUid, storage, true)\n            }\n            decryptedFolder.name = JSON.parse(platform.bytesToString(decryptedData))['name']\n            folders.push(decryptedFolder)\n        }\n    }\n    return folders\n}\n\nexport const getClientId = async (clientKey: string): Promise<string> => {\n    const clientKeyHash = await platform.hash(webSafe64ToBytes(clientKey), CLIENT_ID_HASH_TAG)\n    return platform.bytesToBase64(clientKeyHash)\n}\n\nexport const initializeStorage = async (storage: KeyValueStorage, oneTimeToken: string, hostName?: string | 'keepersecurity.com' | 'keepersecurity.eu' | 'keepersecurity.au') => {\n    const tokenParts = oneTimeToken.split(':')\n    let host, clientKey\n    if (tokenParts.length === 1) {\n        if (!hostName) {\n            throw new Error('The hostname must be present in the token or as a parameter')\n        }\n        host = hostName\n        clientKey = oneTimeToken\n    } else {\n        host = {\n            US: 'keepersecurity.com',\n            EU: 'keepersecurity.eu',\n            AU: 'keepersecurity.com.au',\n            GOV: 'govcloud.keepersecurity.us',\n            JP: 'keepersecurity.jp',\n            CA: 'keepersecurity.ca'\n\n        }[tokenParts[0].toUpperCase()]\n        if (!host) {\n            host = tokenParts[0]\n        }\n        clientKey = tokenParts[1]\n    }\n    const clientKeyBytes = webSafe64ToBytes(clientKey)\n    const clientKeyHash = await platform.hash(clientKeyBytes, CLIENT_ID_HASH_TAG)\n    const clientId = platform.bytesToBase64(clientKeyHash)\n    const existingClientId = await storage.getString(KEY_CLIENT_ID)\n    if (existingClientId) {\n        if (existingClientId === clientId) {\n            return  // the storage is already initialized\n        }\n        throw new Error(`The storage is already initialized with a different client Id (${existingClientId})`)\n    }\n    await storage.saveString(KEY_HOSTNAME, host)\n    await storage.saveString(KEY_CLIENT_ID, clientId)\n    await platform.importKey(KEY_CLIENT_KEY, clientKeyBytes, storage)\n    await platform.generatePrivateKey(KEY_PRIVATE_KEY, storage)\n}\n\nexport const getSecrets = async (options: SecretManagerOptions, recordsFilter?: string[]): Promise<KeeperSecrets> => {\n    const queryOptions = recordsFilter\n        ? {recordsFilter: recordsFilter}\n        : undefined\n    return getSecrets2(options, queryOptions)\n}\n\nexport const getSecrets2 = async (options: SecretManagerOptions, queryOptions?: QueryOptions): Promise<KeeperSecrets> => {\n    platform.cleanKeyCache()\n    const {secrets, justBound} = await fetchAndDecryptSecrets(options, queryOptions)\n    if (justBound) {\n        try {\n            await fetchAndDecryptSecrets(options, queryOptions)\n        } catch (e) {\n            console.error(e)\n        }\n    }\n    return secrets\n}\n\nexport const getFolders = async (options: SecretManagerOptions): Promise<KeeperFolder[]> => {\n    platform.cleanKeyCache()\n    return await fetchAndDecryptFolders(options)\n}\n\n// tryGetNotationResults returns a string list with all values specified by the notation or empty list on error.\n// It simply logs any errors and continue returning an empty string list on error.\nexport const tryGetNotationResults = async (options: SecretManagerOptions, notation: string): Promise<string[]> => {\n    try {\n        return await getNotationResults(options, notation)\n    }\n    catch (e)\n    {\n        console.error(e)\n    }\n    return [] as string[]\n}\n\n// Notation:\n// keeper://<uid|title>/<field|custom_field>/<type|label>[INDEX][PROPERTY]\n// keeper://<uid|title>/file/<filename|fileUID>\n// Record title, field label, filename sections need to escape the delimiters /[]\\ -> \\/ \\[ \\] \\\\\n//\n// GetNotationResults returns selection of the value(s) from a single field as a string list.\n// Multiple records or multiple fields found results in error.\n// Use record UID or unique record titles and field labels so that notation finds a single record/field.\n//\n// If field has multiple values use indexes - numeric INDEX specifies the position in the value list\n// and PROPERTY specifies a single JSON object property to extract (see examples below for usage)\n// If no indexes are provided - whole value list is returned (same as [])\n// If PROPERTY is provided then INDEX must be provided too - even if it's empty [] which means all\n//\n// Extracting two or more but not all field values simultaneously is not supported - use multiple notation requests.\n//\n// Files are returned as URL safe base64 encoded string of the binary content\n//\n// Note: Integrations and plugins usually return single string value - result[0] or ''\n//\n// Examples:\n//  RECORD_UID/file/filename.ext             => ['URL Safe Base64 encoded binary content']\n//  RECORD_UID/field/url                     => ['127.0.0.1', '127.0.0.2'] or [] if empty\n//  RECORD_UID/field/url[]                   => ['127.0.0.1', '127.0.0.2'] or [] if empty\n//  RECORD_UID/field/url[0]                  => ['127.0.0.1'] or error if empty\n//  RECORD_UID/custom_field/name[first]      => Error, numeric index is required to access field property\n//  RECORD_UID/custom_field/name[][last]     => ['Smith', 'Johnson']\n//  RECORD_UID/custom_field/name[0][last]    => ['Smith']\n//  RECORD_UID/custom_field/phone[0][number] => '555-5555555'\n//  RECORD_UID/custom_field/phone[1][number] => '777-7777777'\n//  RECORD_UID/custom_field/phone[]          => ['{\\'number\\': \\'555-555...\\'}', '{\\'number\\': \\'777...\\'}']\n//  RECORD_UID/custom_field/phone[0]         => ['{\\'number\\': \\'555-555...\\'}']\n\n// getNotationResults returns a string list with all values specified by the notation or throws an error.\n// Use tryGetNotationResults() to just log errors and continue returning an empty string list on error.\nexport const getNotationResults = async (options: SecretManagerOptions, notation: string): Promise<string[]> => {\n    let result: string[] = []\n\n    const parsedNotation = parseNotation(notation) // prefix, record, selector, footer\n    if (parsedNotation.length < 3)\n        throw new Error(`Invalid notation ${notation}`)\n\n    if (parsedNotation[1].text == null)\n        throw new Error(`Invalid notation ${notation}`)\n    const recordToken = parsedNotation[1].text[0] // UID or Title\n    if (parsedNotation[2].text == null)\n        throw new Error(`Invalid notation ${notation}`)\n    const selector = parsedNotation[2].text[0] // type|title|notes or file|field|custom_field\n\n    // to minimize traffic - if it looks like a Record UID try to pull a single record\n    let records: KeeperRecord[] = []\n    if (/^[A-Za-z0-9_-]{22}$/.test(recordToken)) {\n        const secrets = await getSecrets(options, [recordToken])\n        records = secrets.records\n        if (records.length > 1)\n            throw new Error(`Notation error - found multiple records with same UID '${recordToken}'`)\n    }\n\n    // If RecordUID is not found - pull all records and search by title\n    if (records.length < 1)\n    {\n        const secrets = await getSecrets(options)\n        if (secrets?.records != null)\n            records = await findSecretsByTitle(secrets.records, recordToken)\n    }\n\n    if (records.length > 1)\n        throw new Error(`Notation error - multiple records match record '${recordToken}'`)\n    if (records.length < 1)\n        throw new Error(`Notation error - no records match record '${recordToken}'`)\n\n    const record = records[0]\n    const parameter = parsedNotation[2].parameter != null ? parsedNotation[2].parameter[0] : ''\n    const index1 = parsedNotation[2].index1 != null ? parsedNotation[2].index1[0] : ''\n    const index2 = parsedNotation[2].index2 != null ? parsedNotation[2].index2[0] : ''\n\n    switch (selector.toLowerCase()) {\n        case 'type': { if (record?.data?.type != null) result.push(record.data.type); break }\n        case 'title': { if (record?.data?.title != null) result.push(record.data.title); break }\n        case 'notes': { if (record?.data?.notes != null) result.push(record.data.notes); break }\n        case 'file': {\n            if (parameter == null)\n                throw new Error(`Notation error - Missing required parameter: filename or file UID for files in record '${recordToken}'`)\n            if ((record?.files?.length || 0) < 1)\n                throw new Error(`Notation error - Record ${recordToken} has no file attachments.`)\n            let files = record.files!.filter(x => parameter == x?.data?.name || parameter == x.fileUid)\n            // file searches do not use indexes and rely on unique file names or fileUid\n            const numFiles = (files == null ? 0 : files.length)\n            if (numFiles > 1)\n                throw new Error(`Notation error - Record ${recordToken} has multiple files matching the search criteria '${parameter}'`)\n            if (numFiles < 1)\n                throw new Error(`Notation error - Record ${recordToken} has no files matching the search criteria '${parameter}'`)\n            const contents = await downloadFile(files[0])\n            const text = webSafe64FromBytes(contents)\n            result.push(text)\n            break\n        }\n        case 'field':\n        case 'custom_field': {\n            if (parsedNotation[2].parameter == null)\n                throw new Error('Notation error - Missing required parameter for the field (type or label): ex. /field/type or /custom_field/MyLabel')\n\n            const fields = (selector.toLowerCase() == 'field' ? record.data.fields :\n                            selector.toLowerCase() == 'custom_field' ? record.data.custom : null)\n            if (!fields)\n                throw new Error(`Notation error - Expected /field or /custom_field but found /${selector}`)\n\n            const flds = fields.filter(x => parameter == x.type || parameter == x.label)\n            if ((flds?.length || 0) > 1)\n                throw new Error(`Notation error - Record ${recordToken} has multiple fields matching the search criteria '${parameter}'`)\n            if ((flds?.length || 0) < 1)\n                throw new Error(`Notation error - Record ${recordToken} has no fields matching the search criteria '${parameter}'`)\n            const field = flds[0]\n            //const fieldType = field?.type || ''\n\n            const idx = tryParseInt(index1, -1) // -1 = full value\n            // valid only if [] or missing - ex. /field/phone or /field/phone[]\n            if (idx == -1 && !(parsedNotation[2].index1 == null || parsedNotation[2].index1[1] == '' || parsedNotation[2].index1[1] == '[]'))\n                throw new Error(`Notation error - Invalid field index ${idx}.`)\n\n            let values = (field?.value != null ? field.value as Object[] : [] as Object[])\n            if (idx >= values.length)\n                throw new Error(`Notation error - Field index out of bounds ${idx} >= ${values.length} for field ${parameter}`)\n            if (idx >= 0) // single index\n                values = [ values[idx] ]\n\n            const fullObjValue = (parsedNotation[2].index2 == null || parsedNotation[2].index2[1] == '' || parsedNotation[2].index2[1] == '[]')\n            let objPropertyName = ''\n            if (parsedNotation[2].index2 != null)\n                objPropertyName = parsedNotation[2].index2[0]\n\n            const res: string[] = []\n            for (let i = 0; i < values.length; i++) {\n                const fldValue = values[i]\n                // Do not throw here to allow for ex. field/name[][middle] to pull [middle] only where present\n                // NB! Not all properties of a value are always required even when the field is marked as required\n                // ex. On a required `name` field only 'first' and 'last' properties are required but not 'middle'\n                // so missing property in a field value is not always an error\n                if (fldValue == null)\n                    console.log('Notation error - Empty field value for field ', parameter) // throw?\n\n                if (fullObjValue) {\n                    res.push(typeof fldValue === 'string' ? fldValue as string : JSON.stringify(fldValue))\n                } else if (fldValue != null) {\n                    if (objPropertyName in fldValue) {\n                        let propKey = objPropertyName as keyof typeof fldValue\n                        const propValue = fldValue[propKey]\n                        res.push(typeof propValue === 'string' ? propValue as string : JSON.stringify(propValue))\n                    } else\n                    console.log(`Notation error - value object has no property '${objPropertyName}'`) // skip\n                } else\n                    console.log(`Notation error - Cannot extract property '${objPropertyName}' from null value.`)\n            }\n\n            if (res.length != values.length)\n                console.log(`Notation warning - extracted ${res.length} out of ${values.length} values for '${objPropertyName}' property.`)\n            if (res.length > 0)\n                result.push.apply(result, res)\n            break\n        }\n        default: { throw new Error(`Invalid notation ${notation}`) }\n    }\n    return result\n}\n\nexport const findSecretsByTitle = async (records: KeeperRecord[], recordTitle: string): Promise<KeeperRecord[]> => {\n    return records.filter(record => record.data.title === recordTitle)\n}\n\nexport const findSecretByTitle = async (records: KeeperRecord[], recordTitle: string): Promise<KeeperRecord | undefined> => {\n    return records.find(record => record.data.title === recordTitle)\n}\n\nexport const getSecretsByTitle = async (options: SecretManagerOptions, recordTitle: string): Promise<KeeperRecord[]> => {\n    const secrets  = await getSecrets(options)\n    return secrets.records.filter(record => record.data.title === recordTitle)\n}\n\nexport const getSecretByTitle = async (options: SecretManagerOptions, recordTitle: string): Promise<KeeperRecord | undefined> => {\n    const secrets  = await getSecrets(options)\n    return secrets.records.find(record => record.data.title === recordTitle)\n}\n\nexport const updateSecret = async (options: SecretManagerOptions, record: KeeperRecord): Promise<void> => {\n    const payload = await prepareUpdatePayload(options.storage, record)\n    await postQuery(options, 'update_secret', payload)\n}\n\nexport const deleteSecret = async (options: SecretManagerOptions, recordUids: string[]): Promise<SecretsManagerDeleteResponse> => {\n    const payload = await prepareDeletePayload(options.storage, recordUids)\n    const responseData = await postQuery(options, 'delete_secret', payload)\n    return JSON.parse(platform.bytesToString(responseData)) as SecretsManagerDeleteResponse\n}\n\nexport const deleteFolder = async (options: SecretManagerOptions, folderUids: string[], forceDeletion?: boolean): Promise<SecretsManagerDeleteResponse> => {\n    const payload = await prepareDeleteFolderPayload(options.storage, folderUids, forceDeletion)\n    const responseData = await postQuery(options, 'delete_folder', payload)\n    return JSON.parse(platform.bytesToString(responseData)) as SecretsManagerDeleteResponse\n}\n\nexport const createSecret = async (options: SecretManagerOptions, folderUid: string, recordData: any): Promise<string> => {\n    if (!platform.hasKeysCached()) {\n        await getSecrets(options) // need to warm up keys cache before posting a record\n    }\n    const payload = await prepareCreatePayload(options.storage, {folderUid: folderUid}, recordData)\n    await postQuery(options, 'create_secret', payload)\n    return payload.recordUid\n}\n\nexport const createSecret2 = async (options: SecretManagerOptions, createOptions: CreateOptions, recordData: any): Promise<string> => {\n    if (!platform.hasKeysCached()) {\n        await getFolders(options) // need to warm up keys cache before posting a record\n    }\n    const payload = await prepareCreatePayload(options.storage, createOptions, recordData)\n    await postQuery(options, 'create_secret', payload)\n    return payload.recordUid\n}\n\nexport const createFolder = async (options: SecretManagerOptions, createOptions: CreateOptions, folderName: string): Promise<string> => {\n    if (!platform.hasKeysCached()) {\n        await getSecrets(options) // need to warm up keys cache before posting a record\n    }\n    const payload = await prepareCreateFolderPayload(options.storage, createOptions, folderName)\n    await postQuery(options, 'create_folder', payload)\n    return payload.folderUid\n}\n\nexport const updateFolder = async (options: SecretManagerOptions, folderUid: string, folderName: string): Promise<void> => {\n    if (!platform.hasKeysCached()) {\n        await getSecrets(options) // need to warm up keys cache before posting a record\n    }\n    const payload = await prepareUpdateFolderPayload(options.storage, folderUid, folderName)\n    await postQuery(options, 'update_folder', payload)\n}\n\nexport const downloadFile = async (file: KeeperFile): Promise<Uint8Array> => {\n    const fileResponse = await platform.get(file.url!, {})\n    return platform.decrypt(fileResponse.data, file.fileUid)\n}\n\nexport const downloadThumbnail = async (file: KeeperFile): Promise<Uint8Array> => {\n    const fileResponse = await platform.get(file.thumbnailUrl!, {})\n    return platform.decrypt(fileResponse.data, file.fileUid)\n}\n\nexport const uploadFile = async (options: SecretManagerOptions, ownerRecord: KeeperRecord, file: KeeperFileUpload): Promise<string> => {\n    const { payload, encryptedFileData } = await prepareFileUploadPayload(options.storage, ownerRecord, file)\n    const responseData = await postQuery(options, 'add_file', payload)\n    const response = JSON.parse(platform.bytesToString(responseData)) as SecretsManagerAddFileResponse\n    const uploadResult = await platform.fileUpload(response.url, JSON.parse(response.parameters), encryptedFileData)\n    if (uploadResult.statusCode !== response.successStatusCode) {\n        throw new Error(`Upload failed (${uploadResult.statusMessage}), code ${uploadResult.statusCode}`)\n    }\n    return payload.fileRecordUid\n}\n\nexport const addCustomField = (record: KeeperRecord, field: KeeperRecordField): void => {\n    if (record.data.custom == null || record.data.custom == undefined)\n        record.data.custom = []\n    record.data.custom.push(field)\n}\n\nexport class KeeperRecordField {\n    type: string = ''\n    label?: string\n}\n\nexport class LoginField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'login'\n        this.value = [value]\n      }\n}\n\nexport type PasswordComplexity = {\n    length?: number\n    caps?: number\n    lowercase?: number\n    digits?: number\n    special?: number\n}\n\nexport class PasswordField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    enforceGeneration? : boolean\n    complexity? : PasswordComplexity\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'password'\n        this.value = [value]\n      }\n}\n\nexport class UrlField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'url'\n        this.value = [value]\n      }\n}\n\nexport class FileRefField extends KeeperRecordField {\n    required? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'fileRef'\n        this.value = [value]\n      }\n}\n\nexport class OneTimeCodeField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'oneTimeCode'\n        this.value = [value]\n      }\n}\n\nexport type Name = {\n    first?: string\n    middle?: string\n    last?: string\n}\n\nexport class NameField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: Name[]\n    constructor(value: Name) {\n        super()\n        this.type = 'name'\n        this.value = [value]\n      }\n}\n\nexport class BirthDateField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: number[]\n    constructor(value: number) {\n        super()\n        this.type = 'birthDate'\n        this.value = [value]\n      }\n}\n\nexport class DateField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: number[]\n    constructor(value: number) {\n        super()\n        this.type = 'date'\n        this.value = [value]\n      }\n}\n\nexport class ExpirationDateField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: number[]\n    constructor(value: number) {\n        super()\n        this.type = 'expirationDate'\n        this.value = [value]\n      }\n}\n\nexport class TextField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'text'\n        this.value = [value]\n      }\n}\n\nexport type SecurityQuestion = {\n    question?: string\n    answer?: string\n}\n\nexport class SecurityQuestionField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: SecurityQuestion[]\n    constructor(value: SecurityQuestion) {\n        super()\n        this.type = 'securityQuestion'\n        this.value = [value]\n      }\n}\n\nexport class MultilineField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'multiline'\n        this.value = [value]\n      }\n}\n\nexport class EmailField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'email'\n        this.value = [value]\n      }\n}\n\nexport class CardRefField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'cardRef'\n        this.value = [value]\n      }\n}\n\nexport class AddressRefField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'addressRef'\n        this.value = [value]\n      }\n}\n\nexport class PinCodeField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'pinCode'\n        this.value = [value]\n      }\n}\n\nexport type Phone = {\n    region?: string\n    number?: string\n    ext?: string\n    type?: string\n}\n\nexport class PhoneField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: Phone[]\n    constructor(value: Phone) {\n        super()\n        this.type = 'phone'\n        this.value = [value]\n      }\n}\n\nexport class SecretField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'secret'\n        this.value = [value]\n      }\n}\n\nexport class SecureNoteField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'note'\n        this.value = [value]\n      }\n}\n\nexport class AccountNumberField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'accountNumber'\n        this.value = [value]\n      }\n}\n\nexport type PaymentCard = {\n    cardNumber?: string\n    cardExpirationDate?: string\n    cardSecurityCode?: string\n}\n\nexport class PaymentCardField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: PaymentCard[]\n    constructor(value: PaymentCard) {\n        super()\n        this.type = 'paymentCard'\n        this.value = [value]\n      }\n}\n\nexport type BankAccount = {\n    accountType?: string\n    routingNumber?: string\n    accountNumber?: string\n    otherType?: string\n}\n\nexport class BankAccountField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: BankAccount[]\n    constructor(value: BankAccount) {\n        super()\n        this.type = 'bankAccount'\n        this.value = [value]\n      }\n}\n\nexport type KeyPair = {\n    publicKey?: string\n    privateKey?: string\n}\n\nexport class KeyPairField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: KeyPair[]\n    constructor(value: KeyPair) {\n        super()\n        this.type = 'keyPair'\n        this.value = [value]\n      }\n}\n\nexport type Host = {\n    hostName?: string\n    port?: string\n}\n\nexport class HostField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: Host[]\n    constructor(value: Host) {\n        super()\n        this.type = 'host'\n        this.value = [value]\n      }\n}\n\nexport type Address = {\n    street1?: string\n    street2?: string\n    city?: string\n    state?: string\n    country?: string\n    zip?: string\n}\n\nexport class AddressField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: Address[]\n    constructor(value: Address) {\n        super()\n        this.type = 'address'\n        this.value = [value]\n      }\n}\n\nexport class LicenseNumberField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'licenseNumber'\n        this.value = [value]\n      }\n}\n\nexport class RecordRefField extends KeeperRecordField {\n    required? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'recordRef'\n        this.value = [value]\n      }\n}\n\nexport type Schedule = {\n    type?: string\n    utcTime?: string\n    weekday?: string\n    intervalCount?: number\n}\n\nexport class ScheduleField extends KeeperRecordField {\n    required? : boolean\n    value?: Schedule[]\n    constructor(value: Schedule) {\n        super()\n        this.type = 'schedule'\n        this.value = [value]\n      }\n}\n\nexport type Script = {\n    fileRef?: string\n    command?: string\n    recordRef?: string[]\n}\n\nexport class ScriptField extends KeeperRecordField {\n    required?: boolean\n    privacyScreen?: boolean\n    value?: Script[]\n    constructor(value: Script) {\n        super()\n        this.type = 'script'\n        this.value = [value]\n      }\n}\n\nexport class DirectoryTypeField extends KeeperRecordField {\n    required? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'directoryType'\n        this.value = [value]\n      }\n}\n\nexport class DatabaseTypeField extends KeeperRecordField {\n    required? : boolean\n    value?: string[]\n    constructor(value: string) {\n        super()\n        this.type = 'databaseType'\n        this.value = [value]\n      }\n}\n\nexport class PamHostnameField extends KeeperRecordField {\n    required? : boolean\n    privacyScreen? : boolean\n    value?: Host[]\n    constructor(value: Host) {\n        super()\n        this.type = 'pamHostname'\n        this.value = [value]\n      }\n}\n\nexport type PamResource = {\n    controllerUid?: string\n    folderUid?: string\n    resourceRef?: string[]\n}\n\nexport class PamResourceField extends KeeperRecordField {\n    required? : boolean\n    value?: PamResource[]\n    constructor(value: PamResource) {\n        super()\n        this.type = 'pamResources'\n        this.value = [value]\n      }\n}\n\nexport class CheckboxField extends KeeperRecordField {\n    required? : boolean\n    value?: boolean[]\n    constructor(value: boolean) {\n        super()\n        this.type = 'checkbox'\n        this.value = [value]\n      }\n}\n\nexport type PrivateKey = {\n    crv?: string\n    d?: string\n    ext?: boolean\n    key_ops?: string[]\n    kty?: string\n    x?: string\n    y?: string\n}\n\nexport type Passkey = {\n    privateKey?: PrivateKey\n    credentialId?: string\n    signCount?: number\n    userId?: string\n    relyingParty?: string\n    username?: string\n    createdDate?: number\n}\n\nexport class PasskeyField extends KeeperRecordField {\n    required?: boolean\n    value?: Passkey[]\n    constructor(value: Passkey) {\n        super()\n        this.type = 'passkey'\n        this.value = [value]\n      }\n}\n","import {EncryptedPayload, KeeperHttpResponse, KeyValueStorage, platform, TransmissionKey, inMemoryStorage} from \"../platform\";\nimport * as fs from 'fs';\n\nexport const localConfigStorage = (configName?: string): KeyValueStorage => {\n\n    const readStorage = (): any => {\n        if (!configName) {\n            return {}\n        }\n        try {\n            return JSON.parse(fs.readFileSync(configName).toString())\n        } catch (e) {\n            return {}\n        }\n    }\n\n    const storageData = readStorage()\n    const storage: KeyValueStorage = inMemoryStorage(storageData)\n\n    const saveStorage = (storage: any) => {\n        if (!configName) {\n            return\n        }\n        fs.writeFileSync(configName, JSON.stringify(storageData, null, 2))\n    }\n\n    return {\n        getString: storage.getString,\n        saveString: async (key, value) => {\n            await storage.saveString(key, value)\n            saveStorage(storage)\n            return Promise.resolve()\n        },\n        getBytes: storage.getBytes,\n        saveBytes: async (key, value) => {\n            await storage.saveBytes(key, value)\n            saveStorage(storage)\n            return Promise.resolve()\n        },\n        delete: async (key) => {\n            await storage.delete(key)\n            saveStorage(storage)\n            return Promise.resolve()\n        }\n    }\n}\n\nexport const cachingPostFunction = async (url: string, transmissionKey: TransmissionKey, payload: EncryptedPayload): Promise<KeeperHttpResponse> => {\n    try {\n        const response = await platform.post(url, payload.payload, {\n            PublicKeyId: transmissionKey.publicKeyId.toString(),\n            TransmissionKey: platform.bytesToBase64(transmissionKey.encryptedKey),\n            Authorization: `Signature ${platform.bytesToBase64(payload.signature)}`\n        })\n        if (response.statusCode == 200) {\n            fs.writeFileSync('cache.dat', Buffer.concat([transmissionKey.key, response.data]))\n        }\n        return response\n    } catch (e) {\n        let cachedData\n        try {\n            cachedData = fs.readFileSync('cache.dat')\n        } catch {\n        }\n        if (!cachedData) {\n            throw new Error('Cached value does not exist')\n        }\n        transmissionKey.key = cachedData.slice(0, 32)\n        return {\n            statusCode: 200,\n            data: cachedData.slice(32),\n            headers: []\n        }\n    }\n}","import {nodePlatform} from \"./nodePlatform\"\nimport {connectPlatform} from \"../platform\"\nimport {initialize} from '../keeper'\n\nconnectPlatform(nodePlatform)\ninitialize()\n\nexport * from '../keeper'\nexport * from '../platform'\nexport * from '../notation'\nexport {getTotpCode, generatePassword} from '../utils'\nexport * from './localConfigStorage'\n"],"names":["platform","randomBytes","generateKeyPair","createSign","createCipheriv","createDecipheriv","createHmac","createECDH","createHash","request","https","fs"],"mappings":"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"}